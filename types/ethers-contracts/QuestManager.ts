/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace QuestManager {
      
    export type QuestStruct = {name: string, description: string, rewardAmount: BigNumberish, rewardType: string, badgeName: string, badgeDescription: string, badgeTokenURI: string, playerName: string, playerPosition: string, playerRating: BigNumberish, playerNationality: string, isLegendary: boolean, isActive: boolean, completions: BigNumberish}

    export type QuestStructOutput = [name: string, description: string, rewardAmount: bigint, rewardType: string, badgeName: string, badgeDescription: string, badgeTokenURI: string, playerName: string, playerPosition: string, playerRating: bigint, playerNationality: string, isLegendary: boolean, isActive: boolean, completions: bigint] & {name: string, description: string, rewardAmount: bigint, rewardType: string, badgeName: string, badgeDescription: string, badgeTokenURI: string, playerName: string, playerPosition: string, playerRating: bigint, playerNationality: string, isLegendary: boolean, isActive: boolean, completions: bigint }
  
    }

  export interface QuestManagerInterface extends Interface {
    getFunction(nameOrSignature: "badgeNFT" | "checkAuthorization" | "completeQuest" | "completed" | "createQuest" | "createQuestWithPlayerReward" | "deactivateQuest" | "footballNFT" | "getContractAddresses" | "getQuest" | "hasCompletedQuest" | "meeToken" | "owner" | "questCounter" | "quests" | "renounceOwnership" | "transferOwnership"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred" | "QuestCompleted" | "QuestCreated"): EventFragment;

    encodeFunctionData(functionFragment: 'badgeNFT', values?: undefined): string;
encodeFunctionData(functionFragment: 'checkAuthorization', values?: undefined): string;
encodeFunctionData(functionFragment: 'completeQuest', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'completed', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'createQuest', values: [string, string, BigNumberish, string, string, string, string]): string;
encodeFunctionData(functionFragment: 'createQuestWithPlayerReward', values: [string, string, BigNumberish, string, string, BigNumberish, string, boolean, string]): string;
encodeFunctionData(functionFragment: 'deactivateQuest', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'footballNFT', values?: undefined): string;
encodeFunctionData(functionFragment: 'getContractAddresses', values?: undefined): string;
encodeFunctionData(functionFragment: 'getQuest', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'hasCompletedQuest', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'meeToken', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'questCounter', values?: undefined): string;
encodeFunctionData(functionFragment: 'quests', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'badgeNFT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'checkAuthorization', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'completeQuest', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'completed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createQuest', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createQuestWithPlayerReward', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'deactivateQuest', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'footballNFT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getContractAddresses', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getQuest', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasCompletedQuest', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'meeToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'questCounter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'quests', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  }

  
    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace QuestCompletedEvent {
      export type InputTuple = [user: AddressLike, questId: BigNumberish, rewardAmount: BigNumberish];
      export type OutputTuple = [user: string, questId: bigint, rewardAmount: bigint];
      export interface OutputObject {user: string, questId: bigint, rewardAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace QuestCreatedEvent {
      export type InputTuple = [questId: BigNumberish, name: string, rewardType: string];
      export type OutputTuple = [questId: bigint, name: string, rewardType: string];
      export interface OutputObject {questId: bigint, name: string, rewardType: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface QuestManager extends BaseContract {
    
    connect(runner?: ContractRunner | null): QuestManager;
    waitForDeployment(): Promise<this>;

    interface: QuestManagerInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    badgeNFT: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    checkAuthorization: TypedContractMethod<
      [],
      [[boolean, boolean, boolean, boolean] & {isAuthorized: boolean, tokenAuthorized: boolean, badgeAuthorized: boolean, footballNFTAuthorized: boolean }],
      'view'
    >
    

    
    completeQuest: TypedContractMethod<
      [questId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    completed: TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    createQuest: TypedContractMethod<
      [name: string, description: string, rewardAmount: BigNumberish, rewardType: string, badgeName: string, badgeDescription: string, badgeTokenURI: string, ],
      [bigint],
      'nonpayable'
    >
    

    
    createQuestWithPlayerReward: TypedContractMethod<
      [name: string, description: string, rewardAmount: BigNumberish, playerName: string, playerPosition: string, playerRating: BigNumberish, playerNationality: string, isLegendary: boolean, playerTokenURI: string, ],
      [bigint],
      'nonpayable'
    >
    

    
    deactivateQuest: TypedContractMethod<
      [questId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    footballNFT: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    getContractAddresses: TypedContractMethod<
      [],
      [[string, string, string, string] & {meeTokenAddress: string, badgeNFTAddress: string, footballNFTAddress: string, questManagerAddress: string }],
      'view'
    >
    

    
    getQuest: TypedContractMethod<
      [questId: BigNumberish, ],
      [QuestManager.QuestStructOutput],
      'view'
    >
    

    
    hasCompletedQuest: TypedContractMethod<
      [user: AddressLike, questId: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    meeToken: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    questCounter: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    quests: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, string, string, string, string, string, string, bigint, string, boolean, boolean, bigint] & {name: string, description: string, rewardAmount: bigint, rewardType: string, badgeName: string, badgeDescription: string, badgeTokenURI: string, playerName: string, playerPosition: string, playerRating: bigint, playerNationality: string, isLegendary: boolean, isActive: boolean, completions: bigint }],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'badgeNFT'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'checkAuthorization'): TypedContractMethod<
      [],
      [[boolean, boolean, boolean, boolean] & {isAuthorized: boolean, tokenAuthorized: boolean, badgeAuthorized: boolean, footballNFTAuthorized: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'completeQuest'): TypedContractMethod<
      [questId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'completed'): TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'createQuest'): TypedContractMethod<
      [name: string, description: string, rewardAmount: BigNumberish, rewardType: string, badgeName: string, badgeDescription: string, badgeTokenURI: string, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'createQuestWithPlayerReward'): TypedContractMethod<
      [name: string, description: string, rewardAmount: BigNumberish, playerName: string, playerPosition: string, playerRating: BigNumberish, playerNationality: string, isLegendary: boolean, playerTokenURI: string, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'deactivateQuest'): TypedContractMethod<
      [questId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'footballNFT'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getContractAddresses'): TypedContractMethod<
      [],
      [[string, string, string, string] & {meeTokenAddress: string, badgeNFTAddress: string, footballNFTAddress: string, questManagerAddress: string }],
      'view'
    >;
getFunction(nameOrSignature: 'getQuest'): TypedContractMethod<
      [questId: BigNumberish, ],
      [QuestManager.QuestStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'hasCompletedQuest'): TypedContractMethod<
      [user: AddressLike, questId: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'meeToken'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'questCounter'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'quests'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, string, string, string, string, string, string, bigint, string, boolean, boolean, bigint] & {name: string, description: string, rewardAmount: bigint, rewardType: string, badgeName: string, badgeDescription: string, badgeTokenURI: string, playerName: string, playerPosition: string, playerRating: bigint, playerNationality: string, isLegendary: boolean, isActive: boolean, completions: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'QuestCompleted'): TypedContractEvent<QuestCompletedEvent.InputTuple, QuestCompletedEvent.OutputTuple, QuestCompletedEvent.OutputObject>;
getEvent(key: 'QuestCreated'): TypedContractEvent<QuestCreatedEvent.InputTuple, QuestCreatedEvent.OutputTuple, QuestCreatedEvent.OutputObject>;

    filters: {
      
      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'QuestCompleted(address,uint256,uint256)': TypedContractEvent<QuestCompletedEvent.InputTuple, QuestCompletedEvent.OutputTuple, QuestCompletedEvent.OutputObject>;
      QuestCompleted: TypedContractEvent<QuestCompletedEvent.InputTuple, QuestCompletedEvent.OutputTuple, QuestCompletedEvent.OutputObject>;
    

      'QuestCreated(uint256,string,string)': TypedContractEvent<QuestCreatedEvent.InputTuple, QuestCreatedEvent.OutputTuple, QuestCreatedEvent.OutputObject>;
      QuestCreated: TypedContractEvent<QuestCreatedEvent.InputTuple, QuestCreatedEvent.OutputTuple, QuestCreatedEvent.OutputObject>;
    
    };
  }