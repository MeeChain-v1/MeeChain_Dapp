/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace MeeBadgeNFT {
      
    export type BadgeStruct = {tokenId: BigNumberish, name: string, description: string, power: string, level: BigNumberish, maxLevel: BigNumberish, rarity: BigNumberish, category: BigNumberish, mintedAt: BigNumberish, originalOwner: AddressLike, isQuestReward: boolean, questId: string, powerBoost: BigNumberish, isUpgradeable: boolean}

    export type BadgeStructOutput = [tokenId: bigint, name: string, description: string, power: string, level: bigint, maxLevel: bigint, rarity: bigint, category: bigint, mintedAt: bigint, originalOwner: string, isQuestReward: boolean, questId: string, powerBoost: bigint, isUpgradeable: boolean] & {tokenId: bigint, name: string, description: string, power: string, level: bigint, maxLevel: bigint, rarity: bigint, category: bigint, mintedAt: bigint, originalOwner: string, isQuestReward: boolean, questId: string, powerBoost: bigint, isUpgradeable: boolean }
  
    }

  export interface MeeBadgeNFTInterface extends Interface {
    getFunction(nameOrSignature: "activatePower" | "activeQuestSets" | "approve" | "authorizeMinter" | "authorizedMinters" | "badges" | "balanceOf" | "createQuestSet" | "getActiveQuestSets" | "getApproved" | "getQuestSetProgress" | "getRarityMaxLevel" | "getRarityXPReward" | "getUserBadgesWithPowers" | "isApprovedForAll" | "mintBadge" | "name" | "owner" | "ownerOf" | "pause" | "paused" | "questSetCompleted" | "questSetCompletors" | "questSets" | "renounceOwnership" | "safeTransferFrom(address,address,uint256)" | "safeTransferFrom(address,address,uint256,bytes)" | "setApprovalForAll" | "supportsInterface" | "symbol" | "tokenURI" | "transferFrom" | "transferOwnership" | "unpause" | "upgradeBadge" | "upgradeBadgeRarity" | "userBadges" | "userHasBadge" | "userLevel" | "userXP"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Approval" | "ApprovalForAll" | "BadgeMinted" | "BadgeUpgraded" | "BatchMetadataUpdate" | "MetadataUpdate" | "OwnershipTransferred" | "Paused" | "PowerActivated" | "QuestSetCompleted" | "QuestSetCreated" | "Transfer" | "Unpaused"): EventFragment;

    encodeFunctionData(functionFragment: 'activatePower', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'activeQuestSets', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'authorizeMinter', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'authorizedMinters', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'badges', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'createQuestSet', values: [string, string, string, string[], string, string, string, BigNumberish, BigNumberish, BigNumberish, string, string, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getActiveQuestSets', values?: undefined): string;
encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getQuestSetProgress', values: [AddressLike, string]): string;
encodeFunctionData(functionFragment: 'getRarityMaxLevel', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getRarityXPReward', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getUserBadgesWithPowers', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'isApprovedForAll', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'mintBadge', values: [AddressLike, string, string, string, BigNumberish, BigNumberish, BigNumberish, string, boolean, string]): string;
encodeFunctionData(functionFragment: 'name', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
encodeFunctionData(functionFragment: 'questSetCompleted', values: [AddressLike, string]): string;
encodeFunctionData(functionFragment: 'questSetCompletors', values: [string, BigNumberish]): string;
encodeFunctionData(functionFragment: 'questSets', values: [string]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'safeTransferFrom(address,address,uint256)', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', values: [AddressLike, AddressLike, BigNumberish, BytesLike]): string;
encodeFunctionData(functionFragment: 'setApprovalForAll', values: [AddressLike, boolean]): string;
encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
encodeFunctionData(functionFragment: 'upgradeBadge', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'upgradeBadgeRarity', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'userBadges', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'userHasBadge', values: [AddressLike, string]): string;
encodeFunctionData(functionFragment: 'userLevel', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'userXP', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'activatePower', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'activeQuestSets', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'authorizeMinter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'authorizedMinters', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'badges', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createQuestSet', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getActiveQuestSets', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getQuestSetProgress', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRarityMaxLevel', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRarityXPReward', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getUserBadgesWithPowers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'mintBadge', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'questSetCompleted', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'questSetCompletors', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'questSets', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'upgradeBadge', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'upgradeBadgeRarity', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'userBadges', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'userHasBadge', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'userLevel', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'userXP', data: BytesLike): Result;
  }

  
    export namespace ApprovalEvent {
      export type InputTuple = [owner: AddressLike, approved: AddressLike, tokenId: BigNumberish];
      export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
      export interface OutputObject {owner: string, approved: string, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ApprovalForAllEvent {
      export type InputTuple = [owner: AddressLike, operator: AddressLike, approved: boolean];
      export type OutputTuple = [owner: string, operator: string, approved: boolean];
      export interface OutputObject {owner: string, operator: string, approved: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace BadgeMintedEvent {
      export type InputTuple = [to: AddressLike, tokenId: BigNumberish, name: string, power: string, level: BigNumberish, rarity: BigNumberish];
      export type OutputTuple = [to: string, tokenId: bigint, name: string, power: string, level: bigint, rarity: bigint];
      export interface OutputObject {to: string, tokenId: bigint, name: string, power: string, level: bigint, rarity: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace BadgeUpgradedEvent {
      export type InputTuple = [tokenId: BigNumberish, newLevel: BigNumberish, enhancedPower: string];
      export type OutputTuple = [tokenId: bigint, newLevel: bigint, enhancedPower: string];
      export interface OutputObject {tokenId: bigint, newLevel: bigint, enhancedPower: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace BatchMetadataUpdateEvent {
      export type InputTuple = [_fromTokenId: BigNumberish, _toTokenId: BigNumberish];
      export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
      export interface OutputObject {_fromTokenId: bigint, _toTokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MetadataUpdateEvent {
      export type InputTuple = [_tokenId: BigNumberish];
      export type OutputTuple = [_tokenId: bigint];
      export interface OutputObject {_tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PowerActivatedEvent {
      export type InputTuple = [user: AddressLike, tokenId: BigNumberish, power: string, boostValue: BigNumberish];
      export type OutputTuple = [user: string, tokenId: bigint, power: string, boostValue: bigint];
      export interface OutputObject {user: string, tokenId: bigint, power: string, boostValue: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace QuestSetCompletedEvent {
      export type InputTuple = [user: AddressLike, setId: string, rewardTokenId: BigNumberish, meeBotQuote: string];
      export type OutputTuple = [user: string, setId: string, rewardTokenId: bigint, meeBotQuote: string];
      export interface OutputObject {user: string, setId: string, rewardTokenId: bigint, meeBotQuote: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace QuestSetCreatedEvent {
      export type InputTuple = [setId: string, title: string];
      export type OutputTuple = [setId: string, title: string];
      export interface OutputObject {setId: string, title: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferEvent {
      export type InputTuple = [from: AddressLike, to: AddressLike, tokenId: BigNumberish];
      export type OutputTuple = [from: string, to: string, tokenId: bigint];
      export interface OutputObject {from: string, to: string, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace UnpausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface MeeBadgeNFT extends BaseContract {
    
    connect(runner?: ContractRunner | null): MeeBadgeNFT;
    waitForDeployment(): Promise<this>;

    interface: MeeBadgeNFTInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    activatePower: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    activeQuestSets: TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >
    

    
    approve: TypedContractMethod<
      [to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    authorizeMinter: TypedContractMethod<
      [minter: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    authorizedMinters: TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    badges: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, string, string, bigint, bigint, bigint, bigint, bigint, string, boolean, string, bigint, boolean] & {tokenId: bigint, name: string, description: string, power: string, level: bigint, maxLevel: bigint, rarity: bigint, category: bigint, mintedAt: bigint, originalOwner: string, isQuestReward: boolean, questId: string, powerBoost: bigint, isUpgradeable: boolean }],
      'view'
    >
    

    
    balanceOf: TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    createQuestSet: TypedContractMethod<
      [setId: string, title: string, description: string, requiredBadges: string[], rewardName: string, rewardDescription: string, rewardPower: string, rewardPowerBoost: BigNumberish, rewardRarity: BigNumberish, rewardCategory: BigNumberish, rewardTokenURI: string, meeBotQuote: string, xpReward: BigNumberish, tokenReward: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    getActiveQuestSets: TypedContractMethod<
      [],
      [string[]],
      'view'
    >
    

    
    getApproved: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    getQuestSetProgress: TypedContractMethod<
      [user: AddressLike, setId: string, ],
      [[bigint, bigint, boolean, string] & {completed: bigint, total: bigint, isCompleted: boolean, meeBotQuote: string }],
      'view'
    >
    

    
    getRarityMaxLevel: TypedContractMethod<
      [rarity: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    getRarityXPReward: TypedContractMethod<
      [rarity: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    getUserBadgesWithPowers: TypedContractMethod<
      [user: AddressLike, ],
      [MeeBadgeNFT.BadgeStructOutput[]],
      'view'
    >
    

    
    isApprovedForAll: TypedContractMethod<
      [owner: AddressLike, operator: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    mintBadge: TypedContractMethod<
      [to: AddressLike, name: string, description: string, power: string, powerBoost: BigNumberish, rarity: BigNumberish, category: BigNumberish, tokenURI: string, isQuestReward: boolean, questId: string, ],
      [bigint],
      'nonpayable'
    >
    

    
    name: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    ownerOf: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    pause: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    paused: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    questSetCompleted: TypedContractMethod<
      [arg0: AddressLike, arg1: string, ],
      [boolean],
      'view'
    >
    

    
    questSetCompletors: TypedContractMethod<
      [arg0: string, arg1: BigNumberish, ],
      [string],
      'view'
    >
    

    
    questSets: TypedContractMethod<
      [arg0: string, ],
      [[string, string, string, MeeBadgeNFT.BadgeStructOutput, bigint, boolean, string, bigint, bigint] & {setId: string, title: string, description: string, rewardBadge: MeeBadgeNFT.BadgeStructOutput, completions: bigint, isActive: boolean, meeBotQuote: string, xpReward: bigint, tokenReward: bigint }],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    "safeTransferFrom(address,address,uint256)": TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    setApprovalForAll: TypedContractMethod<
      [operator: AddressLike, approved: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    supportsInterface: TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    symbol: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    tokenURI: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    transferFrom: TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    unpause: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    upgradeBadge: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    upgradeBadgeRarity: TypedContractMethod<
      [tokenId: BigNumberish, newRarity: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    userBadges: TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    userHasBadge: TypedContractMethod<
      [arg0: AddressLike, arg1: string, ],
      [boolean],
      'view'
    >
    

    
    userLevel: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    userXP: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'activatePower'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'activeQuestSets'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'approve'): TypedContractMethod<
      [to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'authorizeMinter'): TypedContractMethod<
      [minter: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'authorizedMinters'): TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'badges'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, string, string, bigint, bigint, bigint, bigint, bigint, string, boolean, string, bigint, boolean] & {tokenId: bigint, name: string, description: string, power: string, level: bigint, maxLevel: bigint, rarity: bigint, category: bigint, mintedAt: bigint, originalOwner: string, isQuestReward: boolean, questId: string, powerBoost: bigint, isUpgradeable: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'balanceOf'): TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'createQuestSet'): TypedContractMethod<
      [setId: string, title: string, description: string, requiredBadges: string[], rewardName: string, rewardDescription: string, rewardPower: string, rewardPowerBoost: BigNumberish, rewardRarity: BigNumberish, rewardCategory: BigNumberish, rewardTokenURI: string, meeBotQuote: string, xpReward: BigNumberish, tokenReward: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getActiveQuestSets'): TypedContractMethod<
      [],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getApproved'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getQuestSetProgress'): TypedContractMethod<
      [user: AddressLike, setId: string, ],
      [[bigint, bigint, boolean, string] & {completed: bigint, total: bigint, isCompleted: boolean, meeBotQuote: string }],
      'view'
    >;
getFunction(nameOrSignature: 'getRarityMaxLevel'): TypedContractMethod<
      [rarity: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getRarityXPReward'): TypedContractMethod<
      [rarity: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getUserBadgesWithPowers'): TypedContractMethod<
      [user: AddressLike, ],
      [MeeBadgeNFT.BadgeStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'isApprovedForAll'): TypedContractMethod<
      [owner: AddressLike, operator: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'mintBadge'): TypedContractMethod<
      [to: AddressLike, name: string, description: string, power: string, powerBoost: BigNumberish, rarity: BigNumberish, category: BigNumberish, tokenURI: string, isQuestReward: boolean, questId: string, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'name'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'ownerOf'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'pause'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'paused'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'questSetCompleted'): TypedContractMethod<
      [arg0: AddressLike, arg1: string, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'questSetCompletors'): TypedContractMethod<
      [arg0: string, arg1: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'questSets'): TypedContractMethod<
      [arg0: string, ],
      [[string, string, string, MeeBadgeNFT.BadgeStructOutput, bigint, boolean, string, bigint, bigint] & {setId: string, title: string, description: string, rewardBadge: MeeBadgeNFT.BadgeStructOutput, completions: bigint, isActive: boolean, meeBotQuote: string, xpReward: bigint, tokenReward: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'safeTransferFrom(address,address,uint256)'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'safeTransferFrom(address,address,uint256,bytes)'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setApprovalForAll'): TypedContractMethod<
      [operator: AddressLike, approved: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'supportsInterface'): TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'symbol'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'tokenURI'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'transferFrom'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'unpause'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'upgradeBadge'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'upgradeBadgeRarity'): TypedContractMethod<
      [tokenId: BigNumberish, newRarity: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'userBadges'): TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'userHasBadge'): TypedContractMethod<
      [arg0: AddressLike, arg1: string, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'userLevel'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'userXP'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;

    getEvent(key: 'Approval'): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
getEvent(key: 'ApprovalForAll'): TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
getEvent(key: 'BadgeMinted'): TypedContractEvent<BadgeMintedEvent.InputTuple, BadgeMintedEvent.OutputTuple, BadgeMintedEvent.OutputObject>;
getEvent(key: 'BadgeUpgraded'): TypedContractEvent<BadgeUpgradedEvent.InputTuple, BadgeUpgradedEvent.OutputTuple, BadgeUpgradedEvent.OutputObject>;
getEvent(key: 'BatchMetadataUpdate'): TypedContractEvent<BatchMetadataUpdateEvent.InputTuple, BatchMetadataUpdateEvent.OutputTuple, BatchMetadataUpdateEvent.OutputObject>;
getEvent(key: 'MetadataUpdate'): TypedContractEvent<MetadataUpdateEvent.InputTuple, MetadataUpdateEvent.OutputTuple, MetadataUpdateEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'Paused'): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
getEvent(key: 'PowerActivated'): TypedContractEvent<PowerActivatedEvent.InputTuple, PowerActivatedEvent.OutputTuple, PowerActivatedEvent.OutputObject>;
getEvent(key: 'QuestSetCompleted'): TypedContractEvent<QuestSetCompletedEvent.InputTuple, QuestSetCompletedEvent.OutputTuple, QuestSetCompletedEvent.OutputObject>;
getEvent(key: 'QuestSetCreated'): TypedContractEvent<QuestSetCreatedEvent.InputTuple, QuestSetCreatedEvent.OutputTuple, QuestSetCreatedEvent.OutputObject>;
getEvent(key: 'Transfer'): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
getEvent(key: 'Unpaused'): TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;

    filters: {
      
      'Approval(address,address,uint256)': TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
      Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
    

      'ApprovalForAll(address,address,bool)': TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
      ApprovalForAll: TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
    

      'BadgeMinted(address,uint256,string,string,uint256,uint8)': TypedContractEvent<BadgeMintedEvent.InputTuple, BadgeMintedEvent.OutputTuple, BadgeMintedEvent.OutputObject>;
      BadgeMinted: TypedContractEvent<BadgeMintedEvent.InputTuple, BadgeMintedEvent.OutputTuple, BadgeMintedEvent.OutputObject>;
    

      'BadgeUpgraded(uint256,uint256,string)': TypedContractEvent<BadgeUpgradedEvent.InputTuple, BadgeUpgradedEvent.OutputTuple, BadgeUpgradedEvent.OutputObject>;
      BadgeUpgraded: TypedContractEvent<BadgeUpgradedEvent.InputTuple, BadgeUpgradedEvent.OutputTuple, BadgeUpgradedEvent.OutputObject>;
    

      'BatchMetadataUpdate(uint256,uint256)': TypedContractEvent<BatchMetadataUpdateEvent.InputTuple, BatchMetadataUpdateEvent.OutputTuple, BatchMetadataUpdateEvent.OutputObject>;
      BatchMetadataUpdate: TypedContractEvent<BatchMetadataUpdateEvent.InputTuple, BatchMetadataUpdateEvent.OutputTuple, BatchMetadataUpdateEvent.OutputObject>;
    

      'MetadataUpdate(uint256)': TypedContractEvent<MetadataUpdateEvent.InputTuple, MetadataUpdateEvent.OutputTuple, MetadataUpdateEvent.OutputObject>;
      MetadataUpdate: TypedContractEvent<MetadataUpdateEvent.InputTuple, MetadataUpdateEvent.OutputTuple, MetadataUpdateEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'Paused(address)': TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
      Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    

      'PowerActivated(address,uint256,string,uint256)': TypedContractEvent<PowerActivatedEvent.InputTuple, PowerActivatedEvent.OutputTuple, PowerActivatedEvent.OutputObject>;
      PowerActivated: TypedContractEvent<PowerActivatedEvent.InputTuple, PowerActivatedEvent.OutputTuple, PowerActivatedEvent.OutputObject>;
    

      'QuestSetCompleted(address,string,uint256,string)': TypedContractEvent<QuestSetCompletedEvent.InputTuple, QuestSetCompletedEvent.OutputTuple, QuestSetCompletedEvent.OutputObject>;
      QuestSetCompleted: TypedContractEvent<QuestSetCompletedEvent.InputTuple, QuestSetCompletedEvent.OutputTuple, QuestSetCompletedEvent.OutputObject>;
    

      'QuestSetCreated(string,string)': TypedContractEvent<QuestSetCreatedEvent.InputTuple, QuestSetCreatedEvent.OutputTuple, QuestSetCreatedEvent.OutputObject>;
      QuestSetCreated: TypedContractEvent<QuestSetCreatedEvent.InputTuple, QuestSetCreatedEvent.OutputTuple, QuestSetCreatedEvent.OutputObject>;
    

      'Transfer(address,address,uint256)': TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
      Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    

      'Unpaused(address)': TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
      Unpaused: TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
    
    };
  }