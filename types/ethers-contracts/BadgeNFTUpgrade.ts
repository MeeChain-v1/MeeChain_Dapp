/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface BadgeNFTUpgradeInterface extends Interface {
    getFunction(nameOrSignature: "badgeNFT" | "canUpgradeBadge" | "getNextRarity" | "getRarityName" | "getUpgradeCost" | "meeToken" | "owner" | "pause" | "paused" | "rarityProgression" | "renounceOwnership" | "setRarityProgression" | "setUpgradeCost" | "transferOwnership" | "unpause" | "updateBadgeNFT" | "updateMeeToken" | "upgradeBadge" | "upgradeCosts"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "BadgeUpgraded" | "OwnershipTransferred" | "Paused" | "RarityProgressionUpdated" | "Unpaused" | "UpgradeCostUpdated"): EventFragment;

    encodeFunctionData(functionFragment: 'badgeNFT', values?: undefined): string;
encodeFunctionData(functionFragment: 'canUpgradeBadge', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'getNextRarity', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getRarityName', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getUpgradeCost', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'meeToken', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
encodeFunctionData(functionFragment: 'rarityProgression', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'setRarityProgression', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'setUpgradeCost', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
encodeFunctionData(functionFragment: 'updateBadgeNFT', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'updateMeeToken', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'upgradeBadge', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'upgradeCosts', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'badgeNFT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'canUpgradeBadge', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getNextRarity', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRarityName', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getUpgradeCost', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'meeToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rarityProgression', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setRarityProgression', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setUpgradeCost', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateBadgeNFT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateMeeToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'upgradeBadge', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'upgradeCosts', data: BytesLike): Result;
  }

  
    export namespace BadgeUpgradedEvent {
      export type InputTuple = [user: AddressLike, tokenId: BigNumberish, fromRarity: BigNumberish, toRarity: BigNumberish, cost: BigNumberish];
      export type OutputTuple = [user: string, tokenId: bigint, fromRarity: bigint, toRarity: bigint, cost: bigint];
      export interface OutputObject {user: string, tokenId: bigint, fromRarity: bigint, toRarity: bigint, cost: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RarityProgressionUpdatedEvent {
      export type InputTuple = [fromRarity: BigNumberish, toRarity: BigNumberish];
      export type OutputTuple = [fromRarity: bigint, toRarity: bigint];
      export interface OutputObject {fromRarity: bigint, toRarity: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace UnpausedEvent {
      export type InputTuple = [account: AddressLike];
      export type OutputTuple = [account: string];
      export interface OutputObject {account: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace UpgradeCostUpdatedEvent {
      export type InputTuple = [rarity: BigNumberish, newCost: BigNumberish];
      export type OutputTuple = [rarity: bigint, newCost: bigint];
      export interface OutputObject {rarity: bigint, newCost: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface BadgeNFTUpgrade extends BaseContract {
    
    connect(runner?: ContractRunner | null): BadgeNFTUpgrade;
    waitForDeployment(): Promise<this>;

    interface: BadgeNFTUpgradeInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    badgeNFT: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    canUpgradeBadge: TypedContractMethod<
      [tokenId: BigNumberish, user: AddressLike, ],
      [[boolean, string]],
      'view'
    >
    

    
    getNextRarity: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    getRarityName: TypedContractMethod<
      [rarity: BigNumberish, ],
      [string],
      'view'
    >
    

    
    getUpgradeCost: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    meeToken: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    pause: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    paused: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    rarityProgression: TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    setRarityProgression: TypedContractMethod<
      [fromRarity: BigNumberish, toRarity: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setUpgradeCost: TypedContractMethod<
      [rarity: BigNumberish, cost: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    unpause: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    updateBadgeNFT: TypedContractMethod<
      [_badgeNFT: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    updateMeeToken: TypedContractMethod<
      [_meeToken: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    upgradeBadge: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    upgradeCosts: TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'badgeNFT'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'canUpgradeBadge'): TypedContractMethod<
      [tokenId: BigNumberish, user: AddressLike, ],
      [[boolean, string]],
      'view'
    >;
getFunction(nameOrSignature: 'getNextRarity'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getRarityName'): TypedContractMethod<
      [rarity: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getUpgradeCost'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'meeToken'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'pause'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'paused'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'rarityProgression'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setRarityProgression'): TypedContractMethod<
      [fromRarity: BigNumberish, toRarity: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setUpgradeCost'): TypedContractMethod<
      [rarity: BigNumberish, cost: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'unpause'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateBadgeNFT'): TypedContractMethod<
      [_badgeNFT: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateMeeToken'): TypedContractMethod<
      [_meeToken: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'upgradeBadge'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'upgradeCosts'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >;

    getEvent(key: 'BadgeUpgraded'): TypedContractEvent<BadgeUpgradedEvent.InputTuple, BadgeUpgradedEvent.OutputTuple, BadgeUpgradedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'Paused'): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
getEvent(key: 'RarityProgressionUpdated'): TypedContractEvent<RarityProgressionUpdatedEvent.InputTuple, RarityProgressionUpdatedEvent.OutputTuple, RarityProgressionUpdatedEvent.OutputObject>;
getEvent(key: 'Unpaused'): TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
getEvent(key: 'UpgradeCostUpdated'): TypedContractEvent<UpgradeCostUpdatedEvent.InputTuple, UpgradeCostUpdatedEvent.OutputTuple, UpgradeCostUpdatedEvent.OutputObject>;

    filters: {
      
      'BadgeUpgraded(address,uint256,uint8,uint8,uint256)': TypedContractEvent<BadgeUpgradedEvent.InputTuple, BadgeUpgradedEvent.OutputTuple, BadgeUpgradedEvent.OutputObject>;
      BadgeUpgraded: TypedContractEvent<BadgeUpgradedEvent.InputTuple, BadgeUpgradedEvent.OutputTuple, BadgeUpgradedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'Paused(address)': TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
      Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    

      'RarityProgressionUpdated(uint8,uint8)': TypedContractEvent<RarityProgressionUpdatedEvent.InputTuple, RarityProgressionUpdatedEvent.OutputTuple, RarityProgressionUpdatedEvent.OutputObject>;
      RarityProgressionUpdated: TypedContractEvent<RarityProgressionUpdatedEvent.InputTuple, RarityProgressionUpdatedEvent.OutputTuple, RarityProgressionUpdatedEvent.OutputObject>;
    

      'Unpaused(address)': TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
      Unpaused: TypedContractEvent<UnpausedEvent.InputTuple, UnpausedEvent.OutputTuple, UnpausedEvent.OutputObject>;
    

      'UpgradeCostUpdated(uint8,uint256)': TypedContractEvent<UpgradeCostUpdatedEvent.InputTuple, UpgradeCostUpdatedEvent.OutputTuple, UpgradeCostUpdatedEvent.OutputObject>;
      UpgradeCostUpdated: TypedContractEvent<UpgradeCostUpdatedEvent.InputTuple, UpgradeCostUpdatedEvent.OutputTuple, UpgradeCostUpdatedEvent.OutputObject>;
    
    };
  }