/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */


import { ethers } from 'ethers'
import { DeployContractOptions, FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from "./index.js";

declare module "@nomicfoundation/hardhat-ethers/types" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
  getContractFactory(name: 'BadgeNFTUpgrade', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.BadgeNFTUpgrade__factory>
getContractFactory(name: 'FootballNFT', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.FootballNFT__factory>
getContractFactory(name: 'MeeBadgeNFT', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MeeBadgeNFT__factory>
getContractFactory(name: 'MeeToken', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MeeToken__factory>
getContractFactory(name: 'MembershipNFT', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.MembershipNFT__factory>
getContractFactory(name: 'QuestManager', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.QuestManager__factory>
getContractFactory(name: 'IERC721Mintable', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IERC721Mintable__factory>

  getContractAt(name: 'BadgeNFTUpgrade', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.BadgeNFTUpgrade>
getContractAt(name: 'FootballNFT', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.FootballNFT>
getContractAt(name: 'MeeBadgeNFT', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MeeBadgeNFT>
getContractAt(name: 'MeeToken', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MeeToken>
getContractAt(name: 'MembershipNFT', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.MembershipNFT>
getContractAt(name: 'QuestManager', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.QuestManager>
getContractAt(name: 'IERC721Mintable', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IERC721Mintable>

  deployContract(name: 'BadgeNFTUpgrade', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.BadgeNFTUpgrade>
deployContract(name: 'FootballNFT', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.FootballNFT>
deployContract(name: 'MeeBadgeNFT', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MeeBadgeNFT>
deployContract(name: 'MeeToken', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MeeToken>
deployContract(name: 'MembershipNFT', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MembershipNFT>
deployContract(name: 'QuestManager', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.QuestManager>
deployContract(name: 'IERC721Mintable', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IERC721Mintable>

  deployContract(name: 'BadgeNFTUpgrade', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.BadgeNFTUpgrade>
deployContract(name: 'FootballNFT', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.FootballNFT>
deployContract(name: 'MeeBadgeNFT', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MeeBadgeNFT>
deployContract(name: 'MeeToken', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MeeToken>
deployContract(name: 'MembershipNFT', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.MembershipNFT>
deployContract(name: 'QuestManager', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.QuestManager>
deployContract(name: 'IERC721Mintable', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IERC721Mintable>

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
  