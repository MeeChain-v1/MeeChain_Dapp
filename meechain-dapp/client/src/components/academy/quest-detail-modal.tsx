
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  Bot, 
  CheckCircle,
  ArrowRight,
  ArrowLeft,
  Play,
  Sparkles,
  Target,
  BookOpen,
  Lightbulb
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface QuestStep {
  id: number;
  title: string;
  description: string;
  meeBotTip: string;
  action?: 'click' | 'input' | 'connect' | 'quiz';
  isCompleted?: boolean;
}

interface QuestDetailModalProps {
  questId: string;
  questTitle: string;
  onComplete: () => void;
  onClose: () => void;
}

export function QuestDetailModal({ questId, questTitle, onComplete, onClose }: QuestDetailModalProps) {
  const { toast } = useToast();
  
  const [currentStep, setCurrentStep] = useState(0);
  const [completedSteps, setCompletedSteps] = useState<number[]>([]);
  const [isAnimating, setIsAnimating] = useState(false);

  // Quest steps based on questId
  const getQuestSteps = (questId: string): QuestStep[] => {
    switch (questId) {
      case 'wallet-setup':
        return [
          {
            id: 1,
            title: "üéØ ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å Wallet",
            description: "Wallet ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÅ‡∏•‡∏∞ NFT ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
            meeBotTip: "‡∏Ñ‡∏¥‡∏î‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏ô‡∏∞ Wallet ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏• ‡πÅ‡∏ï‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏¢‡∏≠‡∏∞! üîí"
          },
          {
            id: 2,
            title: "üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wallet",
            description: "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MetaMask ‡∏´‡∏£‡∏∑‡∏≠ WalletConnect ‡∏Å‡∏±‡∏ö MeeChain",
            meeBotTip: "‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ß‡∏ô‡∏∞! ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wallet ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô ‡∏ú‡∏°‡∏î‡∏π‡πÅ‡∏•‡πÉ‡∏´‡πâ! üëÄ",
            action: 'connect'
          },
          {
            id: 3,
            title: "‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢",
            description: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ Polygon ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gas Fee ‡∏ñ‡∏π‡∏Å",
            meeBotTip: "Polygon ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏ñ‡∏π‡∏Å‡∏°‡∏≤‡∏Å ‡πÜ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà! üí∞",
            action: 'click'
          },
          {
            id: 4,
            title: "‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠",
            description: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Wallet ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MeeChain ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß",
            meeBotTip: "‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô MeeChain ‡πÅ‡∏•‡πâ‡∏ß! üéâ"
          }
        ];
      
      case 'token-basics':
        return [
          {
            id: 1,
            title: "ü™ô ‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
            description: "‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Web3",
            meeBotTip: "‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÉ‡∏ô‡πÄ‡∏Å‡∏° ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ó‡∏µ‡πà! üéÆ"
          },
          {
            id: 2,
            title: "üéÅ ‡∏£‡∏±‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏ü‡∏£‡∏µ",
            description: "‡πÉ‡∏ä‡πâ Faucet ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏ü‡∏£‡∏µ",
            meeBotTip: "Faucet ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡πä‡∏≠‡∏Å‡∏ô‡πâ‡∏≥ ‡πÅ‡∏ï‡πà‡πÑ‡∏´‡∏•‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏ü‡∏£‡∏µ! ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢! üö∞",
            action: 'click'
          },
          {
            id: 3,
            title: "üì§ ‡∏™‡πà‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô",
            description: "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Address ‡∏≠‡∏∑‡πà‡∏ô",
            meeBotTip: "‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏ô‡∏∞! Address ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô! ‚ö†Ô∏è",
            action: 'input'
          },
          {
            id: 4,
            title: "üìä Quiz: Token Basics",
            description: "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô",
            meeBotTip: "‡∏°‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏Å‡∏±‡∏ô! ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡∏ú‡∏°‡∏à‡∏∞‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ! üß†",
            action: 'quiz'
          }
        ];

      default:
        return [
          {
            id: 1,
            title: "üìö ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ",
            description: "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ô‡∏µ‡πâ",
            meeBotTip: "‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ô‡∏µ‡πâ‡∏™‡∏ô‡∏∏‡∏Å‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô! ‡πÑ‡∏õ‡∏•‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢! üöÄ"
          }
        ];
    }
  };

  const questSteps = getQuestSteps(questId);
  const progressPercentage = (completedSteps.length / questSteps.length) * 100;
  const currentStepData = questSteps[currentStep];

  const completeCurrentStep = () => {
    if (completedSteps.includes(currentStep)) return;
    
    setIsAnimating(true);
    
    setTimeout(() => {
      setCompletedSteps(prev => [...prev, currentStep]);
      
      toast({
        title: "‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        description: `‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${currentStepData.title}`,
      });
      
      setIsAnimating(false);
      
      if (currentStep < questSteps.length - 1) {
        setTimeout(() => setCurrentStep(prev => prev + 1), 1000);
      } else {
        setTimeout(() => {
          toast({
            title: "üéâ ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
            description: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏ö "${questTitle}" ‡πÅ‡∏•‡πâ‡∏ß!`,
          });
          onComplete();
        }, 1500);
      }
    }, 1500);
  };

  const handleQuizAnswer = (isCorrect: boolean) => {
    if (isCorrect) {
      completeCurrentStep();
    } else {
      toast({
        title: "üòÖ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞!",
        description: "‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡∏ú‡∏°‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡πÉ‡∏´‡∏°‡πà!",
      });
    }
  };

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-3xl bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 border-cyan-500/30 text-white max-h-[90vh] overflow-y-auto">
        <CardHeader className="border-b border-slate-700">
          <div className="flex items-center justify-between">
            <CardTitle className="text-cyan-300 flex items-center gap-2">
              <BookOpen className="w-6 h-6" />
              {questTitle}
            </CardTitle>
            <Button
              variant="ghost"
              size="sm"
              onClick={onClose}
              className="text-gray-400 hover:text-white"
            >
              √ó
            </Button>
          </div>
          
          <div className="space-y-3">
            <div className="flex justify-between text-sm">
              <span className="text-gray-300">
                ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô {currentStep + 1} ‡∏à‡∏≤‡∏Å {questSteps.length}
              </span>
              <span className="text-cyan-400">
                {Math.round(progressPercentage)}% ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
              </span>
            </div>
            <Progress value={progressPercentage} className="h-2" />
          </div>
        </CardHeader>

        <CardContent className="p-6">
          {/* Current Step */}
          <div className="space-y-6">
            
            {/* Step Content */}
            <div className="bg-gradient-to-r from-cyan-500/10 to-purple-500/10 rounded-xl p-6 border border-cyan-500/20">
              <div className="flex items-start gap-4">
                <div className="w-12 h-12 bg-cyan-500/20 rounded-xl flex items-center justify-center flex-shrink-0">
                  <Target className="w-6 h-6 text-cyan-400" />
                </div>
                
                <div className="flex-1">
                  <h3 className="text-xl font-bold mb-3 text-cyan-300">
                    {currentStepData.title}
                  </h3>
                  <p className="text-gray-300 mb-4 leading-relaxed">
                    {currentStepData.description}
                  </p>
                  
                  {/* Action Area */}
                  {currentStepData.action === 'quiz' && (
                    <div className="space-y-3">
                      <h4 className="font-semibold text-yellow-300">
                        üìù ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: ‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?
                      </h4>
                      <div className="grid grid-cols-1 gap-2">
                        <Button
                          variant="outline"
                          className="text-left border-gray-600 text-gray-300 hover:bg-green-500/20 hover:border-green-500/50"
                          onClick={() => handleQuizAnswer(true)}
                        >
                          A) ‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Web3
                        </Button>
                        <Button
                          variant="outline"
                          className="text-left border-gray-600 text-gray-300 hover:bg-red-500/20 hover:border-red-500/50"
                          onClick={() => handleQuizAnswer(false)}
                        >
                          B) ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ö‡∏ô‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï
                        </Button>
                        <Button
                          variant="outline"
                          className="text-left border-gray-600 text-gray-300 hover:bg-red-500/20 hover:border-red-500/50"
                          onClick={() => handleQuizAnswer(false)}
                        >
                          C) ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Wallet
                        </Button>
                      </div>
                    </div>
                  )}
                  
                  {currentStepData.action === 'connect' && (
                    <Button
                      onClick={completeCurrentStep}
                      disabled={isAnimating}
                      className="bg-blue-500 hover:bg-blue-600 text-white"
                    >
                      {isAnimating ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠..." : "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wallet"}
                    </Button>
                  )}
                  
                  {currentStepData.action === 'click' && (
                    <Button
                      onClick={completeCurrentStep}
                      disabled={isAnimating}
                      className="bg-green-500 hover:bg-green-600 text-white"
                    >
                      {isAnimating ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£..." : "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠"}
                    </Button>
                  )}
                  
                  {!currentStepData.action && (
                    <Button
                      onClick={completeCurrentStep}
                      disabled={isAnimating}
                      className="bg-cyan-500 hover:bg-cyan-600 text-white"
                    >
                      {isAnimating ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ..." : "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß!"}
                    </Button>
                  )}
                </div>
              </div>
            </div>

            {/* MeeBot Tip */}
            <div className="bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-4">
              <div className="flex items-start gap-3">
                <div className="w-10 h-10 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full flex items-center justify-center flex-shrink-0">
                  <Bot className="w-5 h-5 text-white" />
                </div>
                <div>
                  <h4 className="font-semibold text-yellow-300 mb-1 flex items-center gap-2">
                    <Lightbulb className="w-4 h-4" />
                    MeeBot Tip
                  </h4>
                  <p className="text-yellow-100 text-sm italic leading-relaxed">
                    "{currentStepData.meeBotTip}"
                  </p>
                </div>
              </div>
            </div>

            {/* Step Navigation */}
            <div className="flex items-center justify-between pt-4 border-t border-slate-700">
              <Button
                variant="outline"
                onClick={() => setCurrentStep(prev => Math.max(0, prev - 1))}
                disabled={currentStep === 0}
                className="border-gray-600 text-gray-300 hover:bg-gray-800"
              >
                <ArrowLeft className="w-4 h-4 mr-2" />
                ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
              </Button>
              
              <div className="text-center">
                <div className="flex items-center gap-2">
                  {questSteps.map((_, index) => (
                    <div
                      key={index}
                      className={`w-3 h-3 rounded-full transition-all ${
                        completedSteps.includes(index)
                          ? 'bg-green-400'
                          : index === currentStep
                            ? 'bg-cyan-400'
                            : 'bg-gray-600'
                      }`}
                    />
                  ))}
                </div>
              </div>

              <Button
                variant="outline"
                onClick={() => setCurrentStep(prev => Math.min(questSteps.length - 1, prev + 1))}
                disabled={currentStep === questSteps.length - 1 || !completedSteps.includes(currentStep)}
                className="border-gray-600 text-gray-300 hover:bg-gray-800"
              >
                ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
