
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { RefreshCw, CheckCircle, AlertCircle, Wifi } from 'lucide-react';
import { useMeeBotStatus } from '@/hooks/use-meebot-status';
import { useToast } from '@/hooks/use-toast';

interface ManualNetworkCheckProps {
  targetChainId: string;
  targetNetworkName?: string;
}

export function ManualNetworkCheck({ 
  targetChainId, 
  targetNetworkName = "‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£" 
}: ManualNetworkCheckProps) {
  const { setStatus, setMessage } = useMeeBotStatus();
  const { toast } = useToast();
  const [isChecking, setIsChecking] = useState(false);

  const meeBotMessages = {
    checking: [
      "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢... ‡∏ú‡∏°‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô‡∏°‡∏≤‡∏Å! üîç",
      "‡∏≠‡∏î‡πÉ‡∏à‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏´‡∏° ü§î",
      "MeeBot ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà... ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏à‡∏∞‡∏£‡∏π‡πâ‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß! üß†"
    ],
    success: [
      "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÄ‡∏•‡∏¢! ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏∏‡∏¢‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢! üéØ",
      "‡∏ß‡πâ‡∏≤‡∏ß! ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß! ‡∏ú‡∏°‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏à‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å! üåü",
      "‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡∏°‡∏≤‡∏Å! ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏°‡∏≤‡∏•‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ñ‡∏≠‡∏∞! üöÄ"
    ],
    error: [
      "‡∏≠‡πä‡∏∞... ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡∏ú‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÑ‡∏°‡πà‡πÑ‡∏õ‡πÑ‡∏´‡∏ô! üí™",
      "‡πÄ‡∏≠‡∏≠... ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏∞ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡πÄ‡∏£‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ! üòä",
      "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏´‡πà‡∏ß‡∏á‡πÄ‡∏•‡∏¢! ‡∏ú‡∏°‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ü§ù"
    ],
    walletError: [
      "‡∏≠‡∏∏‡πä‡∏¢... MeeBot ‡∏á‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ô‡∏µ‡πâ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö! üòµ",
      "‡πÄ‡∏≠‡πä‡∏∞? wallet ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏õ‡∏•‡∏Å ‡πÜ ‡∏ô‡∏∞ ‡∏•‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö! üîÑ",
      "‡πÇ‡∏≠‡πä‡∏¢... ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏Å‡∏±‡∏ö wallet ‡∏™‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏£‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ô! üòÖ"
    ]
  };

  const getRandomMessage = (type: keyof typeof meeBotMessages) => {
    const messages = meeBotMessages[type];
    return messages[Math.floor(Math.random() * messages.length)];
  };

  const checkNetwork = async () => {
    setIsChecking(true);
    setStatus('waiting');
    setMessage(getRandomMessage('checking'));

    try {
      if (!window.ethereum) {
        throw new Error('No wallet found');
      }

      const currentChainId = await window.ethereum.request({ method: 'eth_chainId' });
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô animation
      await new Promise(resolve => setTimeout(resolve, 1500));

      if (currentChainId === targetChainId) {
        setStatus('success');
        const successMsg = getRandomMessage('success');
        setMessage(successMsg);
        
        toast({
          title: "üéâ ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!",
          description: "MeeBot ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å!",
        });
      } else {
        setStatus('error');
        const errorMsg = getRandomMessage('error');
        setMessage(errorMsg);
        
        toast({
          title: "ü§® ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á",
          description: `‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: ${currentChainId}, ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ${targetChainId}`,
          variant: "destructive"
        });
      }
    } catch (err) {
      setStatus('error');
      const walletErrorMsg = getRandomMessage('walletError');
      setMessage(walletErrorMsg);
      
      toast({
        title: "üòµ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ",
        variant: "destructive"
      });
    } finally {
      setIsChecking(false);
    }
  };

  return (
    <Card className="bg-slate-800/50 border-slate-600">
      <CardContent className="p-6">
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                <Wifi className="w-5 h-5 text-cyan-400" />
                ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
              </h3>
              <p className="text-gray-300 text-sm mt-1">
                ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÉ‡∏ô wallet ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
              </p>
            </div>
            <Badge className="bg-purple-500/20 text-purple-300 border-purple-500/30">
              {targetNetworkName}
            </Badge>
          </div>

          <div className="bg-slate-700/50 rounded-lg p-4 space-y-3">
            <div className="flex items-center gap-2 text-sm text-gray-300">
              <AlertCircle className="w-4 h-4 text-yellow-400" />
              <span>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÉ‡∏ô wallet ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡πà‡∏≠‡∏ô</span>
            </div>
            <div className="flex items-center gap-2 text-sm text-gray-300">
              <span className="w-4 h-4 text-center">üì±</span>
              <span>Target Chain ID: <code className="bg-slate-600 px-2 py-1 rounded text-cyan-300">{targetChainId}</code></span>
            </div>
          </div>

          <Button
            onClick={checkNetwork}
            disabled={isChecking}
            className="w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white font-semibold py-3"
          >
            {isChecking ? (
              <>
                <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...
              </>
            ) : (
              <>
                <CheckCircle className="w-4 h-4 mr-2" />
                ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
              </>
            )}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}
