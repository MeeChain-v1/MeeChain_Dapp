import { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { 
  Volume2,
  VolumeX,
  Settings,
  Mic,
  Speaker,
  Play,
  Pause,
  RotateCcw,
  Zap,
  Heart,
  Trophy,
  Target
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface VoiceSettings {
  enabled: boolean;
  volume: number;
  rate: number;
  pitch: number;
  voice: string;
}

interface VoiceCoachProps {
  onVoiceMessage?: (message: string) => void;
}

export function VoiceCoach({ onVoiceMessage }: VoiceCoachProps) {
  const { toast } = useToast();
  const [isSupported, setIsSupported] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [availableVoices, setAvailableVoices] = useState<SpeechSynthesisVoice[]>([]);
  const [showSettings, setShowSettings] = useState(false);
  
  const [settings, setSettings] = useState<VoiceSettings>(() => {
    const saved = localStorage.getItem('meebot_voice_settings');
    return saved ? JSON.parse(saved) : {
      enabled: true,
      volume: 0.8,
      rate: 1.0,
      pitch: 1.0,
      voice: ''
    };
  });

  // ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡πÅ‡∏ö‡∏ö Nike Run Club
  const motivationalMessages = {
    questStart: [
      "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏∏‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏ú‡∏°‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏Ñ‡πâ‡∏ä‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! üí™",
      "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞! ‡∏ú‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì! üöÄ",
      "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏°‡∏≤‡∏•‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢! ‚≠ê"
    ],
    questComplete: [
      "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß! ‡∏ú‡∏°‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏à‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å! üéâ",
      "‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡πÄ‡∏•‡∏¢! ‡∏≠‡∏µ‡∏Å‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! üèÜ",
      "‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å! ‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏Ñ‡πà‡∏≤‡πÅ‡∏Å‡πà‡∏Å‡∏≤‡∏£‡∏â‡∏•‡∏≠‡∏á! üéä"
    ],
    levelUp: [
      "‡∏ß‡πâ‡∏≤‡∏ß! ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏õ‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Å‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞! üåü",
      "‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡πÉ‡∏´‡∏°‡πà‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡∏à‡∏£‡∏¥‡∏á‡πÜ! üéØ",
      "‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡πÅ‡∏•‡πâ‡∏ß! ‡∏û‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å! ‚ö°"
    ],
    encouragement: [
      "‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏¢‡∏≠‡∏°‡πÅ‡∏û‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô! üíù",
      "‡∏ú‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì! ‡∏•‡∏∏‡∏¢‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏•‡∏¢! üî•",
      "‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏•‡∏≥‡∏ö‡∏≤‡∏Å‡∏à‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ! ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏°‡∏≤‡∏Å! üíé"
    ],
    achievement: [
      "‡πÄ‡∏à‡πã‡∏á‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! üèÖ",
      "‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏≠‡∏Å! ‡∏ú‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏•‡∏∂‡∏Å! üì∏",
      "‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô! ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏ú‡∏°‡πÄ‡∏•‡∏¢! ‚ú®"
    ]
  };

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Web Speech API
  useEffect(() => {
    if ('speechSynthesis' in window) {
      setIsSupported(true);
      
      // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ
      const loadVoices = () => {
        const voices = speechSynthesis.getVoices();
        setAvailableVoices(voices);
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        if (!settings.voice && voices.length > 0) {
          const thaiVoice = voices.find(voice => 
            voice.lang.includes('th') || voice.name.includes('Thai')
          );
          if (thaiVoice) {
            setSettings(prev => ({ ...prev, voice: thaiVoice.name }));
          }
        }
      };

      loadVoices();
      speechSynthesis.onvoiceschanged = loadVoices;
    }
  }, []);

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
  useEffect(() => {
    localStorage.setItem('meebot_voice_settings', JSON.stringify(settings));
  }, [settings]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏û‡∏π‡∏î
  const speak = useCallback((text: string, options?: { priority?: 'low' | 'normal' | 'high' }) => {
    if (!isSupported || !settings.enabled || isSpeaking) return;

    // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏≤‡∏Å‡∏°‡∏µ
    speechSynthesis.cancel();

    const utterance = new SpeechSynthesisUtterance(text);
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    utterance.volume = settings.volume;
    utterance.rate = settings.rate;
    utterance.pitch = settings.pitch;
    
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    if (settings.voice) {
      const voice = availableVoices.find(v => v.name === settings.voice);
      if (voice) {
        utterance.voice = voice;
      }
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    utterance.onstart = () => setIsSpeaking(true);
    utterance.onend = () => setIsSpeaking(false);
    utterance.onerror = () => setIsSpeaking(false);

    speechSynthesis.speak(utterance);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
    if (onVoiceMessage) {
      onVoiceMessage(text);
    }
  }, [isSupported, settings, isSpeaking, availableVoices, onVoiceMessage]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ
  const sayQuestStart = () => {
    const messages = motivationalMessages.questStart;
    const randomMessage = messages[Math.floor(Math.random() * messages.length)];
    speak(randomMessage);
  };

  const sayQuestComplete = () => {
    const messages = motivationalMessages.questComplete;
    const randomMessage = messages[Math.floor(Math.random() * messages.length)];
    speak(randomMessage);
  };

  const sayLevelUp = (newLevel: number) => {
    const messages = motivationalMessages.levelUp;
    const randomMessage = messages[Math.floor(Math.random() * messages.length)];
    speak(`‡πÄ‡∏•‡πÄ‡∏ß‡∏• ${newLevel}! ${randomMessage}`);
  };

  const sayEncouragement = () => {
    const messages = motivationalMessages.encouragement;
    const randomMessage = messages[Math.floor(Math.random() * messages.length)];
    speak(randomMessage);
  };

  const sayAchievement = (achievement: string) => {
    const messages = motivationalMessages.achievement;
    const randomMessage = messages[Math.floor(Math.random() * messages.length)];
    speak(`‡∏£‡∏±‡∏ö ${achievement} ‡πÅ‡∏•‡πâ‡∏ß! ${randomMessage}`);
  };

  const testVoice = () => {
    speak("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ MeeBot Voice Coach ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö!");
  };

  const stopSpeaking = () => {
    speechSynthesis.cancel();
    setIsSpeaking(false);
  };

  // Expose functions globally ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö components ‡∏≠‡∏∑‡πà‡∏ô
  useEffect(() => {
    (window as any).meeBotVoice = {
      sayQuestStart,
      sayQuestComplete, 
      sayLevelUp,
      sayEncouragement,
      sayAchievement,
      speak
    };
  }, [speak]);

  if (!isSupported) {
    return (
      <Card className="bg-slate-800/50 border-yellow-500/30">
        <CardContent className="p-4">
          <div className="flex items-center gap-2 text-yellow-300">
            <VolumeX className="w-5 h-5" />
            <span className="text-sm">‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Voice Coach</span>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="bg-slate-800/50 border-purple-500/30">
      <CardHeader className="pb-3">
        <CardTitle className="flex items-center justify-between text-purple-300">
          <div className="flex items-center gap-2">
            <div className="p-2 bg-purple-500/20 rounded-full">
              <Speaker className={`w-5 h-5 ${isSpeaking ? 'animate-pulse text-purple-400' : 'text-purple-300'}`} />
            </div>
            <div>
              <span className="text-lg">üó£Ô∏è MeeBot Voice Coach</span>
              <div className="flex items-center gap-2 mt-1">
                <Badge className={`text-xs ${settings.enabled ? 'bg-green-500/20 text-green-300 border-green-500/30' : 'bg-gray-500/20 text-gray-300 border-gray-500/30'}`}>
                  {settings.enabled ? 'üé§ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : 'üîá ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}
                </Badge>
                {isSpeaking && (
                  <Badge className="bg-purple-500/20 text-purple-300 border-purple-500/30 text-xs">
                    <Mic className="w-3 h-3 mr-1 animate-pulse" />
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏π‡∏î...
                  </Badge>
                )}
              </div>
            </div>
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setShowSettings(!showSettings)}
            className="text-gray-300 hover:text-white hover:bg-white/10"
          >
            <Settings className="w-4 h-4" />
          </Button>
        </CardTitle>
      </CardHeader>

      <CardContent className="space-y-4">
        {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Voice Coach */}
        <div className="bg-slate-700/50 rounded-lg p-3">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm text-gray-300">Voice Coach Status</span>
            <Switch
              checked={settings.enabled}
              onCheckedChange={(enabled) => setSettings(prev => ({ ...prev, enabled }))}
              data-testid="switch-voice-enable"
            />
          </div>
          <p className="text-xs text-gray-400">
            {settings.enabled 
              ? "üéØ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à!" 
              : "üò¥ Voice Coach ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà"
            }
          </p>
        </div>

        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á */}
        <div className="grid grid-cols-2 gap-3">
          <Button
            onClick={testVoice}
            disabled={!settings.enabled || isSpeaking}
            className="bg-purple-600 hover:bg-purple-500 text-white"
            data-testid="button-test-voice"
          >
            <Play className="w-4 h-4 mr-2" />
            ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
          </Button>

          <Button
            onClick={stopSpeaking}
            disabled={!isSpeaking}
            variant="outline"
            className="border-red-500 text-red-300 hover:bg-red-500/10"
            data-testid="button-stop-voice"
          >
            <Pause className="w-4 h-4 mr-2" />
            ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏π‡∏î
          </Button>
        </div>

        {/* ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á */}
        <div className="space-y-2">
          <h4 className="text-white font-medium text-sm">üé™ ‡∏•‡∏≠‡∏á‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à:</h4>
          <div className="grid grid-cols-2 gap-2">
            <Button
              size="sm"
              variant="outline"
              onClick={sayQuestStart}
              disabled={!settings.enabled || isSpeaking}
              className="border-green-500/50 text-green-300 hover:bg-green-500/10 text-xs"
            >
              <Target className="w-3 h-3 mr-1" />
              ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏ß‡∏™
            </Button>
            <Button
              size="sm"
              variant="outline"
              onClick={sayQuestComplete}
              disabled={!settings.enabled || isSpeaking}
              className="border-blue-500/50 text-blue-300 hover:bg-blue-500/10 text-xs"
            >
              <Trophy className="w-3 h-3 mr-1" />
              ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
            </Button>
            <Button
              size="sm"
              variant="outline"
              onClick={() => sayLevelUp(5)}
              disabled={!settings.enabled || isSpeaking}
              className="border-yellow-500/50 text-yellow-300 hover:bg-yellow-500/10 text-xs"
            >
              <Zap className="w-3 h-3 mr-1" />
              ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏õ
            </Button>
            <Button
              size="sm"
              variant="outline"
              onClick={sayEncouragement}
              disabled={!settings.enabled || isSpeaking}
              className="border-pink-500/50 text-pink-300 hover:bg-pink-500/10 text-xs"
            >
              <Heart className="w-3 h-3 mr-1" />
              ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à
            </Button>
          </div>
        </div>

        {/* ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á */}
        {showSettings && (
          <div className="bg-slate-900/50 rounded-lg p-4 space-y-4 border border-slate-600/30">
            <h4 className="text-white font-medium flex items-center gap-2">
              <Settings className="w-4 h-4" />
              ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á MeeBot
            </h4>

            {/* ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á */}
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-300">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏á</span>
                <span className="text-cyan-300">{Math.round(settings.volume * 100)}%</span>
              </div>
              <Slider
                value={[settings.volume]}
                onValueChange={([volume]) => setSettings(prev => ({ ...prev, volume }))}
                min={0}
                max={1}
                step={0.1}
                className="w-full"
                data-testid="slider-volume"
              />
            </div>

            {/* ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î */}
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-300">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß</span>
                <span className="text-cyan-300">{settings.rate.toFixed(1)}x</span>
              </div>
              <Slider
                value={[settings.rate]}
                onValueChange={([rate]) => setSettings(prev => ({ ...prev, rate }))}
                min={0.5}
                max={2}
                step={0.1}
                className="w-full"
                data-testid="slider-rate"
              />
            </div>

            {/* ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á */}
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-300">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á</span>
                <span className="text-cyan-300">{settings.pitch.toFixed(1)}</span>
              </div>
              <Slider
                value={[settings.pitch]}
                onValueChange={([pitch]) => setSettings(prev => ({ ...prev, pitch }))}
                min={0.5}
                max={2}
                step={0.1}
                className="w-full"
                data-testid="slider-pitch"
              />
            </div>

            {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á */}
            {availableVoices.length > 0 && (
              <div className="space-y-2">
                <span className="text-gray-300 text-sm">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á</span>
                <select
                  value={settings.voice}
                  onChange={(e) => setSettings(prev => ({ ...prev, voice: e.target.value }))}
                  className="w-full bg-slate-700 border border-slate-600 rounded px-3 py-2 text-white text-sm"
                  data-testid="select-voice"
                >
                  <option value="">‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</option>
                  {availableVoices.map((voice) => (
                    <option key={voice.name} value={voice.name}>
                      {voice.name} ({voice.lang})
                    </option>
                  ))}
                </select>
              </div>
            )}

            {/* ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ */}
            <Button
              variant="outline"
              size="sm"
              onClick={() => setSettings({
                enabled: true,
                volume: 0.8,
                rate: 1.0,
                pitch: 1.0,
                voice: ''
              })}
              className="w-full border-slate-500 text-slate-300 hover:bg-slate-700"
              data-testid="button-reset-settings"
            >
              <RotateCcw className="w-4 h-4 mr-2" />
              ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  );
}

// Export ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
export type { VoiceSettings };