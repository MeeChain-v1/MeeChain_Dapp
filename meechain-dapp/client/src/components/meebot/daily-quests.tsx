import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  Trophy,
  Target,
  Clock,
  Zap,
  Star,
  Gift,
  CheckCircle,
  Sparkles
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { VoiceCoach } from './voice-coach';

interface Quest {
  id: number;
  title: string;
  description: string;
  reward: string;
  xp: number;
  badge?: string;
  completed: boolean;
  difficulty: 'easy' | 'medium' | 'hard';
  category: 'productivity' | 'learning' | 'social' | 'wellness' | 'exploration' | 'lifestyle';
}

interface DailyQuestsProps {
  onLevelUp?: (newLevel: number) => void;
}

export function DailyQuests({ onLevelUp }: DailyQuestsProps) {
  const { toast } = useToast();
  
  // Voice Coach Functions
  const triggerVoiceCoach = (action: 'questComplete' | 'levelUp' | 'encouragement', data?: any) => {
    if (typeof window !== 'undefined' && (window as any).meeBotVoice) {
      const voice = (window as any).meeBotVoice;
      switch (action) {
        case 'questComplete':
          voice.sayQuestComplete();
          break;
        case 'levelUp':
          voice.sayLevelUp(data);
          break;
        case 'encouragement':
          voice.sayEncouragement();
          break;
      }
    }
  };
  // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏ß‡∏™‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
  const questPool = {
    exploration: [
      {
        title: 'üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Swap',
        description: '‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏£‡∏∞‡∏ö‡∏ö Token Swap ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ö Badge "Web3 Explorer"',
        reward: '+10 XP, Badge "Web3 Explorer"',
        xp: 10,
        badge: 'Web3 Explorer',
        difficulty: 'easy' as const
      },
      {
        title: 'ü™ô ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç CUSTOM ‡∏à‡∏≤‡∏Å Faucet',
        description: '‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ERC-20 ‡πÉ‡∏´‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Faucet',
        reward: '+15 XP, Badge "Token Collector"',
        xp: 15,
        badge: 'Token Collector',
        difficulty: 'medium' as const
      },
      {
        title: 'üí∞ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Wallet Balance',
        description: '‡πÄ‡∏ä‡πá‡∏Ñ Balance ‡πÉ‡∏ô Wallet ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô!',
        reward: '+8 XP, Badge "Wallet Master"',
        xp: 8,
        badge: 'Wallet Master',
        difficulty: 'easy' as const
      },
      {
        title: 'üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Transaction',
        description: '‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ Transaction ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!',
        reward: '+12 XP, Badge "Data Explorer"',
        xp: 12,
        badge: 'Data Explorer',
        difficulty: 'medium' as const
      }
    ],
    productivity: [
      {
        title: 'üåÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå 3 ‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
        description: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏•‡∏±‡∏á! ‡∏•‡∏∏‡∏¢ 3 ‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô 12:00 ‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤',
        reward: '+15 XP, Badge "Early Riser"',
        xp: 15,
        badge: 'Early Riser',
        difficulty: 'medium' as const
      },
      {
        title: '‚ö° ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ Pomodoro 3 ‡∏£‡∏≠‡∏ö',
        description: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 25 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏û‡∏±‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ó‡∏≥ 3 ‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö!',
        reward: '+18 XP, Badge "Focus Master"',
        xp: 18,
        badge: 'Focus Master',
        difficulty: 'medium' as const
      },
      {
        title: 'üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á Task List ‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà',
        description: '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ Task List ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö!',
        reward: '+10 XP, Badge "Planner Pro"',
        xp: 10,
        badge: 'Planner Pro',
        difficulty: 'easy' as const
      }
    ],
    lifestyle: [
      {
        title: 'üßò‚Äç‚ôÇÔ∏è ‡∏û‡∏±‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
        description: 'Productivity ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏ô‡∏∞‡∏Æ‡∏∞! ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï',
        reward: '+8 XP, Badge "Zen Pilot"',
        xp: 8,
        badge: 'Zen Pilot',
        difficulty: 'easy' as const
      },
      {
        title: 'üíß ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥ 8 ‡πÅ‡∏Å‡πâ‡∏ß‡∏ï‡∏•‡∏≠‡∏î‡∏ß‡∏±‡∏ô',
        description: '‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥! ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô',
        reward: '+6 XP, Badge "Hydration Hero"',
        xp: 6,
        badge: 'Hydration Hero',
        difficulty: 'easy' as const
      },
      {
        title: 'üö∂‚Äç‚ôÇÔ∏è ‡πÄ‡∏î‡∏¥‡∏ô 30 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
        description: '‡∏≠‡∏≠‡∏Å‡πÅ‡∏£‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á!',
        reward: '+12 XP, Badge "Active Life"',
        xp: 12,
        badge: 'Active Life',
        difficulty: 'medium' as const
      }
    ],
    social: [
      {
        title: 'üí¨ ‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö MeeBot 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        description: '‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏ú‡∏°‡∏™‡∏¥! ‡∏¢‡∏¥‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏ï‡∏≠‡∏ö',
        reward: '+12 XP, Badge "Chatty Friend"',
        xp: 12,
        badge: 'Chatty Friend',
        difficulty: 'easy' as const
      },
      {
        title: 'ü§ù ‡∏ä‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ TaskPilot',
        description: '‡πÅ‡∏ä‡∏£‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡πÜ ‡πÑ‡∏î‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô!',
        reward: '+20 XP, Badge "Community Builder"',
        xp: 20,
        badge: 'Community Builder',
        difficulty: 'hard' as const
      },
      {
        title: 'üì± ‡πÅ‡∏ä‡∏£‡πå Achievement ‡πÉ‡∏ô‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•',
        description: '‡πÇ‡∏ä‡∏ß‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡πÇ‡∏•‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏´‡πá‡∏ô!',
        reward: '+15 XP, Badge "Show Off"',
        xp: 15,
        badge: 'Show Off',
        difficulty: 'medium' as const
      }
    ]
  };

  // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏Ñ‡∏ß‡∏™‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î (1 ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î)
  const generateDailyQuests = () => {
    const categories = Object.keys(questPool) as Array<keyof typeof questPool>;
    const selectedQuests = categories.map((category, index) => {
      const categoryQuests = questPool[category];
      const randomQuest = categoryQuests[Math.floor(Math.random() * categoryQuests.length)];
      return {
        id: index + 1,
        ...randomQuest,
        category,
        completed: false
      };
    });
    return selectedQuests;
  };

  const [quests, setQuests] = useState<Quest[]>(() => {
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô localStorage ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const today = new Date().toDateString();
    const savedQuests = localStorage.getItem(`meebot_daily_quests_${today}`);

    if (savedQuests) {
      return JSON.parse(savedQuests);
    } else {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏ß‡∏™‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      const newQuests = generateDailyQuests();
      localStorage.setItem(`meebot_daily_quests_${today}`, JSON.stringify(newQuests));
      return newQuests;
    }
  });

  const [currentXP, setCurrentXP] = useState(() => {
    return parseInt(localStorage.getItem('meebot_xp') || '0');
  });

  const [currentLevel, setCurrentLevel] = useState(() => {
    return parseInt(localStorage.getItem('meebot_level') || '1');
  });

  const [dailyStreak, setDailyStreak] = useState(() => {
    return parseInt(localStorage.getItem('meebot_daily_streak') || '0');
  });

  const completedQuests = quests.filter(q => q.completed).length;
  const totalQuests = quests.length;
  const questProgress = (totalQuests > 0) ? (completedQuests / totalQuests) * 100 : 0;

  // XP ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  const xpForNextLevel = currentLevel * 50;
  const xpProgress = (xpForNextLevel > 0) ? (currentXP / xpForNextLevel) * 100 : 0;

  useEffect(() => {
    localStorage.setItem('meebot_xp', currentXP.toString());
    localStorage.setItem('meebot_level', currentLevel.toString());
    localStorage.setItem('meebot_daily_streak', dailyStreak.toString());
  }, [currentXP, currentLevel, dailyStreak]);

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏Ñ‡∏ß‡∏™‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏±‡∏ô
  useEffect(() => {
    const checkNewDay = () => {
      const today = new Date().toDateString();
      const lastQuestDate = localStorage.getItem('meebot_last_quest_date');

      if (lastQuestDate !== today) {
        // ‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà! ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏ß‡∏™‡πÉ‡∏´‡∏°‡πà
        const newQuests = generateDailyQuests();
        setQuests(newQuests);
        localStorage.setItem(`meebot_daily_quests_${today}`, JSON.stringify(newQuests));
        localStorage.setItem('meebot_last_quest_date', today);

        // ‡πÄ‡∏ä‡πá‡∏Ñ streak
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        const yesterdayQuests = localStorage.getItem(`meebot_daily_quests_${yesterday.toDateString()}`);

        if (yesterdayQuests) {
          const parsedYesterdayQuests = JSON.parse(yesterdayQuests);
          const yesterdayCompleted = parsedYesterdayQuests.filter((q: Quest) => q.completed).length;

          if (yesterdayCompleted >= 3) { // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏ß‡∏™‡∏Ñ‡∏£‡∏ö 3 ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
            setDailyStreak(prev => prev + 1);
          } else {
            setDailyStreak(0); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï streak
          }
        }
      }
    };

    checkNewDay();
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å ‡πÜ ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô)
    const interval = setInterval(checkNewDay, 60000);

    return () => clearInterval(interval);
  }, []);

  // MeeBot ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö quest ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
  const meeBotComments = {
    productivity: [
      "‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡πÄ‡∏•‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ô‡∏±‡∏Å‡∏ö‡∏¥‡∏ô‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ï‡∏±‡∏ß‡∏à‡∏£‡∏¥‡∏á! üöÄ",
      "‡∏ú‡∏°‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏à‡πÉ‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å! ‡∏•‡∏∏‡∏¢‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏•‡∏¢! üí™",
      "‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÉ‡∏´‡πâ MeeBot ‡∏≠‡∏¥‡∏à‡∏â‡∏≤‡πÄ‡∏•‡∏¢‡∏ô‡∏∞! ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å! üèÜ"
    ],
    learning: [
      "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏™‡∏°‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏ö‡∏ö real-time! üß†‚ú®",
      "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÉ‡∏´‡∏°‡πà ‡πÜ ‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á? ‡∏ú‡∏°‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏∞! üìö",
      "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Å‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞! ‡∏ú‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß! ü§ñ"
    ],
    wellness: [
      "‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ = Productivity‡∏îI! üåü",
      "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏û! ‡∏ú‡∏°‡∏ä‡∏≠‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏™‡∏°‡∏î‡∏∏‡∏•! üßò‚Äç‚ôÇÔ∏è",
      "Work-life balance ‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á? ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ! ‚öñÔ∏è"
    ],
    social: [
      "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏ú‡∏°‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏°‡∏≤‡∏Å! üòä",
      "‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÉ‡∏´‡πâ MeeBot ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡πÄ‡∏•‡∏¢! ü§ó",
      "‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡∏∏‡∏Å‡∏°‡∏≤‡∏Å! ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏´‡∏°? üí¨"
    ],
    exploration: [
      "‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! Web3 ‡∏£‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏∞! üöÄ‚õµ",
      "‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÇ‡∏•‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞! Blockchain ‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏ö‡πâ‡∏≤‡∏á? üåç",
      "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô Explorer ‡∏ï‡∏±‡∏ß‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏•‡∏¢! ‡∏ú‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö! üó∫Ô∏è"
    ],
    lifestyle: [
      "‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î! Work-Life Balance ‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏µ‡πâ‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å! ‚öñÔ∏è‚ú®",
      "‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï! ‡∏ú‡∏°‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏°‡∏°‡∏≤‡∏Å! üåü",
      "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å! ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö! üòä"
    ]
  };

  const handleCompleteQuest = (questId: number) => {
    const quest = quests.find(q => q.id === questId);
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ quest ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å completed
    if (!quest || quest.completed) return;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï quest status
    const updatedQuests = quests.map(q => 
      q.id === questId ? { ...q, completed: true } : q
    );
    setQuests(updatedQuests);

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡∏á localStorage
    const today = new Date().toDateString();
    localStorage.setItem(`meebot_daily_quests_${today}`, JSON.stringify(updatedQuests));

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° XP
    const newXP = currentXP + quest.xp;
    setCurrentXP(newXP);

    // ‡πÄ‡∏ä‡πá‡∏Ñ level up
    const requiredXP = currentLevel * 50;
    if (newXP >= requiredXP) {
      const newLevel = currentLevel + 1;
      setCurrentLevel(newLevel);
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ newXP - requiredXP ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö
      setCurrentXP(Math.max(0, newXP - requiredXP)); 

      // Voice Coach: Level Up!
      triggerVoiceCoach('levelUp', newLevel);

      if (onLevelUp) {
        onLevelUp(newLevel);
      }
    }

    // ‡πÅ‡∏™‡∏î‡∏á toast ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏û‡∏π‡∏î MeeBot
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ quest.category ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô meeBotComments ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const comments = meeBotComments[quest.category as keyof typeof meeBotComments];
    const randomComment = comments && comments.length > 0 
      ? comments[Math.floor(Math.random() * comments.length)]
      : "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å!"; // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ category ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô

    // Voice Coach: Quest Complete!
    triggerVoiceCoach('questComplete');

    toast({
      title: "üéâ ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
      description: `${quest.reward} - ${randomComment}`,
    });
  };

  const getDifficultyColor = (difficulty: Quest['difficulty']) => {
    switch (difficulty) {
      case 'easy': return 'bg-green-500/20 text-green-400 border-green-500/30';
      case 'medium': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';
      case 'hard': return 'bg-red-500/20 text-red-400 border-red-500/30';
      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';
    }
  };

  const getCategoryIcon = (category: Quest['category']) => {
    switch (category) {
      case 'productivity': return <Target className="w-4 h-4" />;
      case 'learning': return <Sparkles className="w-4 h-4" />;
      case 'wellness': return <Star className="w-4 h-4" />;
      case 'social': return <Gift className="w-4 h-4" />;
      case 'exploration': return <Zap className="w-4 h-4" />;
      case 'lifestyle': return <Star className="w-4 h-4" />;
      default: return <Zap className="w-4 h-4" />;
    }
  };

  return (
    <div className="space-y-6">
      {/* Level & XP Overview */}
      <Card className="bg-gradient-to-r from-purple-500/10 to-cyan-500/10 border-purple-500/30">
        <CardHeader className="pb-3">
          <CardTitle className="flex items-center justify-between text-white">
            <div className="flex items-center gap-2">
              <Trophy className="w-6 h-6 text-yellow-400" />
              <span>Level {currentLevel} TaskPilot</span>
            </div>
            <div className="flex items-center gap-2">
              {dailyStreak > 0 && (
                <Badge className="bg-orange-500/20 text-orange-300 border-orange-500/30">
                  üî• {dailyStreak} ‡∏ß‡∏±‡∏ô‡∏ï‡∏¥‡∏î
                </Badge>
              )}
              <Badge className="bg-yellow-500/20 text-yellow-300 border-yellow-500/30">
                {currentXP} / {xpForNextLevel} XP
              </Badge>
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <div className="flex justify-between text-sm text-gray-300 mb-2">
              <span>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡πÄ‡∏ß‡∏•</span>
              <span>{Math.round(xpProgress)}%</span>
            </div>
            <Progress value={xpProgress} className="h-3 bg-slate-700" />
          </div>

          <div>
            <div className="flex justify-between text-sm text-gray-300 mb-2">
              <span>‡πÄ‡∏Ñ‡∏ß‡∏™‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ({completedQuests}/{totalQuests})</span>
              <span>{Math.round(questProgress)}%</span>
            </div>
            <Progress value={questProgress} className="h-2 bg-slate-700" />
          </div>
        </CardContent>
      </Card>

      {/* Daily Quests */}
      <Card className="bg-slate-800/50 border-cyan-500/30">
        <CardHeader>
          <CardTitle className="flex items-center justify-between text-cyan-300">
            <div className="flex items-center gap-2">
              <Clock className="w-5 h-5" />
              üéØ ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å MeeBot
            </div>
            <div className="text-sm text-gray-400">
              ‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô!
            </div>
          </CardTitle>
          <p className="text-gray-300 text-sm mt-2">
            üí¨ <strong>MeeBot ‡∏ö‡∏≠‡∏Å:</strong> "‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô 4 ‡∏´‡∏°‡∏ß‡∏î! 
            {completedQuests === 0 && " ‡∏°‡∏≤‡∏•‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞! üöÄ"}
            {completedQuests > 0 && completedQuests < totalQuests && ` ‡∏ó‡∏≥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ${completedQuests} ‡πÄ‡∏Ñ‡∏ß‡∏™ ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å! üí™`}
            {completedQuests === totalQuests && " ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏Ñ‡∏ß‡∏™‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏à‡πã‡∏á‡∏°‡∏≤‡∏Å! üèÜ"}
            "
          </p>
        </CardHeader>
        <CardContent className="space-y-4">
          {quests.map((quest) => (
            <div 
              key={quest.id}
              className={`p-4 rounded-lg border transition-all ${
                quest.completed 
                  ? 'bg-green-500/10 border-green-500/30' 
                  : 'bg-slate-700/50 border-slate-600'
              }`}
            >
              <div className="flex items-start justify-between mb-3">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <h4 className={`font-semibold ${
                      quest.completed ? 'text-green-300 line-through' : 'text-white'
                    }`}>
                      {quest.title}
                    </h4>
                    {quest.completed && <CheckCircle className="w-5 h-5 text-green-400" />}
                  </div>
                  <p className="text-gray-300 text-sm mb-3">{quest.description}</p>

                  <div className="flex items-center gap-2 flex-wrap">
                    <Badge className={getDifficultyColor(quest.difficulty)}>
                      {quest.difficulty}
                    </Badge>
                    <Badge className="bg-slate-600/50 text-gray-300 border-slate-500/30">
                      {getCategoryIcon(quest.category)}
                      <span className="ml-1 capitalize">{quest.category}</span>
                    </Badge>
                    <span className="text-cyan-300 text-sm font-medium">
                      {quest.reward}
                    </span>
                  </div>
                </div>

                <div className="ml-4">
                  <Button
                    onClick={() => handleCompleteQuest(quest.id)}
                    disabled={quest.completed}
                    size="sm"
                    className={quest.completed 
                      ? "bg-green-500/20 text-green-300 border border-green-500/30" 
                      : "bg-cyan-500 hover:bg-cyan-600 text-white"
                    }
                  >
                    {quest.completed ? (
                      <>
                        <CheckCircle className="w-4 h-4 mr-1" />
                        ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                      </>
                    ) : (
                      <>
                        <Zap className="w-4 h-4 mr-1" />
                        ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏ß‡∏™
                      </>
                    )}
                  </Button>
                </div>
              </div>
            </div>
          ))}
        </CardContent>
      </Card>
    </div>
  );
}