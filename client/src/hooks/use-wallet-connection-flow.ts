
import { useState, useEffect } from 'react';
import { ethers } from 'ethers';
import { useToast } from '@/hooks/use-toast';

export type ConnectionState = 
  | 'idle' 
  | 'intent-prompt' 
  | 'requesting' 
  | 'connected' 
  | 'rejected' 
  | 'error' 
  | 'preview-mode';

export type WalletProvider = 'metamask' | 'walletconnect' | 'coinbase' | 'preview';

interface MeeBotReaction {
  emoji: string;
  message: string;
  actions?: Array<{
    label: string;
    action: () => void;
    variant?: 'default' | 'secondary' | 'destructive';
  }>;
}

interface WalletConnectionFlowState {
  state: ConnectionState;
  provider: WalletProvider | null;
  address: string | null;
  isConnected: boolean;
  meeBotReaction: MeeBotReaction | null;
  questProgress: {
    step: number;
    total: number;
    completed: boolean;
  };
}

export function useWalletConnectionFlow() {
  const { toast } = useToast();
  const [rejectionCount, setRejectionCount] = useState(0);
  const [requestTimeout, setRequestTimeout] = useState<NodeJS.Timeout | null>(null);
  
  const [flowState, setFlowState] = useState<WalletConnectionFlowState>({
    state: 'idle',
    provider: null,
    address: null,
    isConnected: false,
    meeBotReaction: null,
    questProgress: {
      step: 1,
      total: 5,
      completed: false
    }
  });

  // MeeBot reactions for different states
  const meeBotReactions = {
    welcome: {
      emoji: 'üéØ',
      message: 'üéÆ Quest #1: Connect Wallet to Unlock Your First Badge! ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ wallet ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å badge ‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö!',
      actions: [
        {
          label: 'üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à',
          action: () => requestWalletAccess(),
          variant: 'default' as const
        },
        {
          label: 'üëÄ ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô',
          action: () => enablePreviewMode(),
          variant: 'secondary' as const
        }
      ]
    },
    requesting: {
      emoji: 'üîÑ',
      message: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏à‡∏≤‡∏Å wallet... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö popup ‡∏´‡∏£‡∏∑‡∏≠ wallet app ‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö üîê',
      actions: [
        {
          label: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
          action: () => cancelWalletRequest(),
          variant: 'secondary' as const
        }
      ]
    },
    connected: {
      emoji: 'üèÜ',
      message: 'üéâ Quest Complete! ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö badge "Wallet Master" ‡πÅ‡∏•‡∏∞ 100 MEE tokens!',
      actions: [
        {
          label: '‚ú® ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•',
          action: () => completeQuest(),
          variant: 'default' as const
        }
      ]
    },
    rejected: {
      emoji: 'üòÖ',
      message: '‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏°‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å badge ‡πÅ‡∏£‡∏Å‡πÑ‡∏´‡∏°?',
      actions: [
        {
          label: 'üîÑ ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ wallet ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
          action: () => requestWalletAccess(),
          variant: 'default' as const
        },
        {
          label: 'üëÄ ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á',
          action: () => enablePreviewMode(),
          variant: 'secondary' as const
        }
      ]
    },
    multipleRejects: {
      emoji: 'ü§î',
      message: 'MeeBot ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á flow ‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏°? ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ wallet ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
      actions: [
        {
          label: 'üõ†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö wallet',
          action: () => showWalletTroubleshooting(),
          variant: 'secondary' as const
        },
        {
          label: 'üëÄ ‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á',
          action: () => enablePreviewMode(),
          variant: 'default' as const
        }
      ]
    },
    error: {
      emoji: 'üö®',
      message: 'MeeBot ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ wallet üòî ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞ wallet ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?',
      actions: [
        {
          label: 'üîß ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç',
          action: () => showTroubleshooting(),
          variant: 'secondary' as const
        },
        {
          label: 'üëÄ ‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á',
          action: () => enablePreviewMode(),
          variant: 'default' as const
        }
      ]
    },
    preview: {
      emoji: 'üéÆ',
      message: '‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á! ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏ó‡∏∏‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° wallet ‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡πá‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÑ‡∏î‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö',
      actions: [
        {
          label: 'üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° wallet ‡∏à‡∏£‡∏¥‡∏á',
          action: () => requestWalletAccess(),
          variant: 'default' as const
        }
      ]
    },
    troubleshooting: {
      emoji: 'üîß',
      message: '‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ wallet: 1) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MetaMask ‡πÅ‡∏•‡πâ‡∏ß 2) ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ wallet 3) ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï popup 4) ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÅ‡∏•‡πâ‡∏ß',
      actions: [
        {
          label: '‚úÖ ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà',
          action: () => requestWalletAccess(),
          variant: 'default' as const
        },
        {
          label: 'üëÄ ‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á',
          action: () => enablePreviewMode(),
          variant: 'secondary' as const
        }
      ]
    }
  };

  // Initialize with welcome message
  useEffect(() => {
    showIntentPrompt();
  }, []);

  // Auto-check for existing connections
  useEffect(() => {
    checkExistingConnection();
  }, []);

  const showIntentPrompt = () => {
    setFlowState(prev => ({
      ...prev,
      state: 'intent-prompt',
      meeBotReaction: meeBotReactions.welcome
    }));
  };

  const checkExistingConnection = async () => {
    try {
      if (typeof window.ethereum !== 'undefined') {
        const provider = new ethers.BrowserProvider(window.ethereum);
        const accounts = await provider.listAccounts();
        
        if (accounts.length > 0) {
          const address = accounts[0].address;
          setFlowState(prev => ({
            ...prev,
            state: 'connected',
            provider: 'metamask',
            address,
            isConnected: true,
            questProgress: { ...prev.questProgress, completed: true },
            meeBotReaction: {
              emoji: '‚úÖ',
              message: 'Wallet ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢',
              actions: []
            }
          }));
        }
      }
    } catch (error) {
      console.error('Error checking existing connection:', error);
    }
  };

  const requestWalletAccess = async () => {
    // Clear any existing timeout
    if (requestTimeout) {
      clearTimeout(requestTimeout);
      setRequestTimeout(null);
    }

    setFlowState(prev => ({
      ...prev,
      state: 'requesting',
      meeBotReaction: meeBotReactions.requesting
    }));

    // Set timeout for wallet request (30 seconds)
    const timeout = setTimeout(() => {
      setFlowState(prev => ({
        ...prev,
        state: 'error',
        meeBotReaction: {
          ...meeBotReactions.error,
          message: '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ wallet ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞ popup ‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Ñ ‡∏´‡∏£‡∏∑‡∏≠ wallet ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á'
        }
      }));
    }, 30000);

    setRequestTimeout(timeout);

    try {
      if (typeof window.ethereum === 'undefined') {
        throw new Error('MetaMask ‡∏´‡∏£‡∏∑‡∏≠ wallet ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MetaMask ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö');
      }

      const provider = new ethers.BrowserProvider(window.ethereum);
      
      // Add a small delay to prevent rapid-fire requests
      await new Promise(resolve => setTimeout(resolve, 500));
      
      await provider.send("eth_requestAccounts", []);
      
      // Clear timeout on success
      clearTimeout(timeout);
      setRequestTimeout(null);
      
      const signer = await provider.getSigner();
      const address = await signer.getAddress();

      // Reset rejection counter on successful connection
      setRejectionCount(0);

      setFlowState(prev => ({
        ...prev,
        state: 'connected',
        provider: 'metamask',
        address,
        isConnected: true,
        questProgress: { ...prev.questProgress, completed: true },
        meeBotReaction: meeBotReactions.connected
      }));

      toast({
        title: "üèÜ Quest Complete!",
        description: "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ wallet ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏£‡∏±‡∏ö badge 'Wallet Master' ‡πÅ‡∏•‡∏∞ 100 MEE tokens",
      });

    } catch (error: any) {
      // Clear timeout on error
      clearTimeout(timeout);
      setRequestTimeout(null);
      
      console.error('Wallet connection error:', error);
      
      if (error.code === 4001) {
        // User rejected request
        const newRejectionCount = rejectionCount + 1;
        setRejectionCount(newRejectionCount);
        
        // Show different message after multiple rejections
        if (newRejectionCount >= 3) {
          setFlowState(prev => ({
            ...prev,
            state: 'rejected',
            meeBotReaction: meeBotReactions.multipleRejects
          }));
        } else {
          setFlowState(prev => ({
            ...prev,
            state: 'rejected',
            meeBotReaction: meeBotReactions.rejected
          }));
        }

        toast({
          title: "üòÖ MeeBot ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à",
          description: `‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò (${newRejectionCount}/3) - ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö`,
        });
        
      } else {
        // Other errors
        setFlowState(prev => ({
          ...prev,
          state: 'error',
          meeBotReaction: meeBotReactions.error
        }));

        toast({
          title: "üö® MeeBot ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤",
          description: error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ wallet",
          variant: "destructive",
        });
      }
    }
  };

  const enablePreviewMode = () => {
    // Generate mock address for preview
    const mockAddress = `0x${Math.random().toString(16).substr(2, 40)}`;
    
    setFlowState(prev => ({
      ...prev,
      state: 'preview-mode',
      provider: 'preview',
      address: mockAddress,
      isConnected: false, // Not really connected
      questProgress: { ...prev.questProgress, completed: true },
      meeBotReaction: meeBotReactions.preview
    }));

    toast({
      title: "üéÆ MeeBot ‡πÅ‡∏à‡πâ‡∏á",
      description: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô mock data",
    });
  };

  const completeQuest = async () => {
    // Mark quest as completed via API
    try {
      const response = await fetch('/api/mission/complete', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: localStorage.getItem('userId'),
          missionId: 'wallet_connection',
          proof: {
            address: flowState.address,
            provider: flowState.provider,
            timestamp: new Date().toISOString()
          }
        })
      });

      if (response.ok) {
        toast({
          title: "üèÜ ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
          description: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö 100 MEE token ‡πÅ‡∏•‡∏∞ badge 'Wallet Master'",
        });
      }
    } catch (error) {
      console.error('Error completing quest:', error);
    }
  };

  const disconnect = () => {
    setFlowState({
      state: 'idle',
      provider: null,
      address: null,
      isConnected: false,
      meeBotReaction: null,
      questProgress: {
        step: 1,
        total: 5,
        completed: false
      }
    });
    
    setTimeout(() => showIntentPrompt(), 500);
  };

  const cancelWalletRequest = () => {
    if (requestTimeout) {
      clearTimeout(requestTimeout);
      setRequestTimeout(null);
    }
    
    setFlowState(prev => ({
      ...prev,
      state: 'idle',
      meeBotReaction: {
        emoji: 'ü§ñ',
        message: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö',
        actions: [
          {
            label: 'üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
            action: () => requestWalletAccess(),
            variant: 'default' as const
          },
          {
            label: 'üëÄ ‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á',
            action: () => enablePreviewMode(),
            variant: 'secondary' as const
          }
        ]
      }
    }));
  };

  const showWalletTroubleshooting = () => {
    setFlowState(prev => ({
      ...prev,
      state: 'error',
      meeBotReaction: {
        emoji: 'üõ†Ô∏è',
        message: '‡πÄ‡∏ä‡πá‡∏Ñ‡∏•‡∏¥‡∏™‡∏ï‡πå wallet: ‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MetaMask ‡πÅ‡∏•‡πâ‡∏ß ‚úÖ ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ wallet ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï popup ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö',
        actions: [
          {
            label: '‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
            action: () => requestWalletAccess(),
            variant: 'default' as const
          },
          {
            label: 'üëÄ ‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á',
            action: () => enablePreviewMode(),
            variant: 'secondary' as const
          }
        ]
      }
    }));
  };

  const showTroubleshooting = () => {
    setFlowState(prev => ({
      ...prev,
      state: 'error',
      meeBotReaction: meeBotReactions.troubleshooting
    }));
  };

  const retry = () => {
    requestWalletAccess();
  };

  // Cleanup timeout on unmount
  useEffect(() => {
    return () => {
      if (requestTimeout) {
        clearTimeout(requestTimeout);
      }
    };
  }, [requestTimeout]);

  return {
    ...flowState,
    rejectionCount,
    actions: {
      requestWalletAccess,
      enablePreviewMode,
      completeQuest,
      disconnect,
      retry,
      showIntentPrompt,
      cancelWalletRequest,
      showWalletTroubleshooting,
      showTroubleshooting
    }
  };
}
