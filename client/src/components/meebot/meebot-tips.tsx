
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  Bot,
  Lightbulb,
  RefreshCw,
  Sparkles,
  Zap,
  Target,
  Clock,
  MessageCircle,
  TrendingUp
} from 'lucide-react';

export function MeeBotTips() {
  const [currentTip, setCurrentTip] = useState(0);
  const [isAnimating, setIsAnimating] = useState(false);

  // MeeBot tips ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≥ ‡πÜ ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
  const tips = [
    {
      category: "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡∏°",
      icon: "ü§ù",
      message: "‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏µ! ‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡πÅ‡∏ä‡∏£‡πå progress ‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ô‡πÑ‡∏´‡∏°?",
      action: "‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡∏°",
      priority: "high"
    },
    {
      category: "‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö Productivity",
      icon: "‚ö°",
      message: "‡∏ú‡∏°‡∏ß‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏≥ Pomodoro ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏û‡∏•‡∏±‡∏á‡πÇ‡∏Ñ‡∏ï‡∏£‡πÄ‡∏ó‡πà! ‡πÉ‡∏Ñ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡∏•‡∏≠‡∏á‡πÑ‡∏´‡∏°?",
      action: "‡πÄ‡∏£‡∏¥‡πà‡∏° Pomodoro ‡∏ó‡∏µ‡∏°",
      priority: "medium"
    },
    {
      category: "‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à",
      icon: "üåü",
      message: "‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡πÑ‡∏´‡∏°‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡∏°‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß 127 ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ! ‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡∏°‡∏≤‡∏Å ‡πÜ ‡πÄ‡∏•‡∏¢!",
      action: "‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡∏°",
      priority: "low"
    },
    {
      category: "‡πÄ‡∏Ñ‡∏ß‡∏™‡πÉ‡∏´‡∏°‡πà",
      icon: "üéØ",
      message: "‡∏°‡∏µ‡πÄ‡∏Ñ‡∏ß‡∏™‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß! '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏Ñ‡∏ô' ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•: +50 XP ‡πÉ‡∏Ñ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡∏•‡∏∏‡∏¢‡πÑ‡∏´‡∏°?",
      action: "‡∏î‡∏π‡πÄ‡∏Ñ‡∏ß‡∏™‡πÉ‡∏´‡∏°‡πà",
      priority: "high"
    },
    {
      category: "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô",
      icon: "üßò‚Äç‚ôÇÔ∏è",
      message: "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞! ‡∏ú‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏û‡∏±‡∏Å 5-10 ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏î‡∏¥‡∏ô‡∏¢‡∏∑‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏¢‡∏∑‡∏î‡∏™‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö!",
      action: "‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡∏°",
      priority: "medium"
    },
    {
      category: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      icon: "üèÜ",
      message: "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡∏° 'Web3 Warriors' ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å Badge 'Code Master' ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å!",
      action: "‡∏î‡∏π Achievement",
      priority: "high"
    },
    {
      category: "‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÉ‡∏´‡∏°‡πà",
      icon: "üí°",
      message: "‡∏ú‡∏°‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏°‡∏≤‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ pair programming ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏•‡∏¢! ‡πÉ‡∏Ñ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡∏•‡∏≠‡∏á‡πÑ‡∏´‡∏°?",
      action: "‡∏´‡∏≤‡∏Ñ‡∏π‡πà programming",
      priority: "medium"
    },
    {
      category: "‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à",
      icon: "üìä",
      message: "‡∏ó‡∏µ‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏µ productivity rate ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 14:00-16:00 ‡∏ô.! ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á Golden Hour ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞!",
      action: "‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ï‡πá‡∏°",
      priority: "low"
    }
  ];

  // ‡∏™‡∏∏‡πà‡∏° tip ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  useEffect(() => {
    const interval = setInterval(() => {
      setIsAnimating(true);
      setTimeout(() => {
        setCurrentTip((prev) => (prev + 1) % tips.length);
        setIsAnimating(false);
      }, 300);
    }, 10000);

    return () => clearInterval(interval);
  }, [tips.length]);

  const getCurrentTip = () => tips[currentTip];
  const tip = getCurrentTip();

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'from-red-500/20 to-pink-500/20 border-red-500/30';
      case 'medium': return 'from-yellow-500/20 to-orange-500/20 border-yellow-500/30';
      case 'low': return 'from-green-500/20 to-blue-500/20 border-green-500/30';
      default: return 'from-gray-500/20 to-slate-500/20 border-gray-500/30';
    }
  };

  const handleRefreshTip = () => {
    setIsAnimating(true);
    setTimeout(() => {
      setCurrentTip((prev) => (prev + 1) % tips.length);
      setIsAnimating(false);
    }, 300);
  };

  return (
    <Card className={`bg-gradient-to-r ${getPriorityColor(tip.priority)} transition-all duration-500 ${
      isAnimating ? 'scale-95 opacity-70' : 'scale-100 opacity-100'
    }`}>
      <CardHeader className="pb-3">
        <CardTitle className="flex items-center justify-between text-white">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-purple-500/30 rounded-full animate-pulse">
              <Bot className="w-5 h-5 text-purple-300" />
            </div>
            <div>
              <span className="text-lg">üí¨ MeeBot Live Tips</span>
              <div className="flex items-center gap-2 mt-1">
                <Badge className="bg-purple-500/20 text-purple-300 border-purple-500/30 text-xs">
                  <Clock className="w-3 h-3 mr-1" />
                  Real-time
                </Badge>
                <Badge className={`text-xs ${
                  tip.priority === 'high' ? 'bg-red-500/20 text-red-300 border-red-500/30' :
                  tip.priority === 'medium' ? 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30' :
                  'bg-green-500/20 text-green-300 border-green-500/30'
                }`}>
                  {tip.priority === 'high' ? 'üî• ‡∏î‡πà‡∏ß‡∏ô' : tip.priority === 'medium' ? '‚≠ê ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥' : 'üí° ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'}
                </Badge>
              </div>
            </div>
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={handleRefreshTip}
            className="text-gray-300 hover:text-white hover:bg-white/10"
          >
            <RefreshCw className={`w-4 h-4 ${isAnimating ? 'animate-spin' : ''}`} />
          </Button>
        </CardTitle>
      </CardHeader>

      <CardContent className="space-y-4">
        <div className="bg-white/5 backdrop-blur-sm rounded-lg p-4">
          <div className="flex items-start gap-3">
            <div className="text-2xl flex-shrink-0 mt-1">
              {tip.icon}
            </div>
            <div className="flex-1">
              <div className="flex items-center gap-2 mb-2">
                <Lightbulb className="w-4 h-4 text-yellow-400" />
                <span className="text-cyan-300 font-medium text-sm">{tip.category}</span>
              </div>
              <p className="text-gray-200 text-sm leading-relaxed">
                {tip.message}
              </p>
            </div>
          </div>
        </div>

        <div className="flex gap-2">
          <Button 
            size="sm"
            className="flex-1 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white"
          >
            <Target className="w-4 h-4 mr-2" />
            {tip.action}
          </Button>
          
          <Button 
            variant="outline" 
            size="sm"
            className="border-cyan-500 text-cyan-300 hover:bg-cyan-800/50"
          >
            <MessageCircle className="w-4 h-4" />
          </Button>
          
          <Button 
            variant="outline" 
            size="sm"
            className="border-green-500 text-green-300 hover:bg-green-800/50"
          >
            <TrendingUp className="w-4 h-4" />
          </Button>
        </div>

        {/* Tip Counter */}
        <div className="flex justify-center">
          <Badge className="bg-slate-700/50 text-gray-300 border-slate-600 text-xs">
            Tips {currentTip + 1} / {tips.length}
          </Badge>
        </div>
      </CardContent>
    </Card>
  );
}
