# üß™ Tech Stack Assumptions
- **Next.js (App Router)**
- **wagmi v2** for wallet connection
- **ethers.js** under the hood
- **MeeBot UI**: emoji + message + button system
- **Fallback preview mode** if user rejects

---

## üß± 1. Setup wagmi config

```ts
// lib/wagmi.ts
import { createConfig, configureChains } from 'wagmi';
import { mainnet } from 'wagmi/chains';
import { MetaMaskConnector } from 'wagmi/connectors/metaMask';

export const wagmiConfig = createConfig({
  autoConnect: true,
  connectors: [new MetaMaskConnector()],
  publicClient: configureChains([mainnet], [/* providers */]).publicClient,
});
```

---

## üéõÔ∏è 2. MeeBot UI Component

```tsx
// components/MeeBot.tsx
export function MeeBot({ emoji, message, action }: { emoji: string; message: string; action?: () => void }) {
  return (
    <div className="meebot">
      <span>{emoji}</span>
      <p>{message}</p>
      {action && <button onClick={action}>‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</button>}
    </div>
  );
}
```

---
## üöÄ 3. Wallet Connect Flow with Fallback
```tsx
// components/WalletConnect.tsx
'use client';
import { useAccount, useConnect } from 'wagmi';
import { MeeBot } from './MeeBot';

export default function WalletConnect() {
  const { connect } = useConnect();
  const { address, isConnected } = useAccount();
  const [errorCode, setErrorCode] = useState<number | null>(null);

  const handleConnect = async () => {
    try {
      await connect({ connector: new MetaMaskConnector() });
    } catch (err: any) {
      if (err.code === 4001) {
        setErrorCode(4001); // user rejected
      } else {
        setErrorCode(500); // unknown error
      }
    }
  };

  if (isConnected) {
    return <MeeBot emoji="üéâ" message={`‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ${address}`} />;
  }

  if (errorCode === 4001) {
    return (
      <MeeBot
        emoji="üòÖ"
        message="‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ wallet ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏´‡∏°?"
        action={handleConnect}
      />
    );
  }

  if (errorCode === 500) {
    return <MeeBot emoji="üö®" message="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ wallet" />;
  }

  return (
    <MeeBot
      emoji="üß≠"
      message="‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏£‡∏Å: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° wallet ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö badge ‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!"
      action={handleConnect}
    />
  );
}
```
---
## üëÄ 4. Fallback Preview Mode
```tsx
// If user rejects or skips, enable preview mode
function enablePreviewMode() {
  return <MeeBot emoji="üëÄ" message="‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á flow ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° wallet" />;
}
```
---
## üß© 5. Integration with MeeChain UI

- Embed `<WalletConnect />` in your onboarding quest page
- Trigger fallback badge minting via smanky-node if wallet is unavailable
- Use MeeBot reactions to guide retry, preview, or quest progression
