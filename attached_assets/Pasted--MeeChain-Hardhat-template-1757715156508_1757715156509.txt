‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡∏Ñ‡∏£‡∏±‡∏ö‡∏ò‡∏ì‡∏ß‡∏±‡∏í‡∏ô‡πå! ‡∏°‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à MeeChain ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢ üéÆ‚ú® ‡∏ú‡∏°‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° **Hardhat template**, ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô **deploy script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ contract**, ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö **‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö MeeBot quest system** ‡πÅ‡∏ö‡∏ö modular ‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

---

## üß± 1. Hardhat Template ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

### üìÅ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå

```
meechain-contracts/
‚îú‚îÄ‚îÄ contracts/
‚îÇ   ‚îú‚îÄ‚îÄ MeeToken.sol
‚îÇ   ‚îú‚îÄ‚îÄ BadgeNFT.sol
‚îÇ   ‚îî‚îÄ‚îÄ QuestManager.sol
‚îú‚îÄ‚îÄ scripts/
‚îÇ   ‚îî‚îÄ‚îÄ deploy.ts
‚îú‚îÄ‚îÄ hardhat.config.ts
‚îú‚îÄ‚îÄ .env
‚îî‚îÄ‚îÄ package.json
```

---

## üß† 2. ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Smart Contracts

### ü™ô MeeToken.sol

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract MeeToken is ERC20 {
    constructor() ERC20("MeeToken", "MEE") {
        _mint(msg.sender, 1_000_000 * 10 ** decimals());
    }
}
```

### üõ°Ô∏è BadgeNFT.sol

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";

contract BadgeNFT is ERC721URIStorage {
    uint256 public nextTokenId;

    constructor() ERC721("MeeBadge", "MBG") {}

    function mintBadge(address to, string memory uri) external {
        _safeMint(to, nextTokenId);
        _setTokenURI(nextTokenId, uri);
        nextTokenId++;
    }
}
```

### üß≠ QuestManager.sol

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract QuestManager {
    mapping(address => uint256) public xp;
    event QuestCompleted(address indexed user, string questName, uint256 xpGained);

    function completeQuest(string memory questName, uint256 xpGained) external {
        xp[msg.sender] += xpGained;
        emit QuestCompleted(msg.sender, questName, xpGained);
    }
}
```

---

## üöÄ 3. Deploy Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ Contract

```ts
// scripts/deploy.ts
import { ethers } from "hardhat";

async function main() {
  const [deployer] = await ethers.getSigners();
  console.log("Deploying contracts with:", deployer.address);

  const MeeToken = await ethers.getContractFactory("MeeToken");
  const meeToken = await MeeToken.deploy();
  await meeToken.deployed();
  console.log("MeeToken deployed to:", meeToken.address);

  const BadgeNFT = await ethers.getContractFactory("BadgeNFT");
  const badgeNFT = await BadgeNFT.deploy();
  await badgeNFT.deployed();
  console.log("BadgeNFT deployed to:", badgeNFT.address);

  const QuestManager = await ethers.getContractFactory("QuestManager");
  const questManager = await QuestManager.deploy();
  await questManager.deployed();
  console.log("QuestManager deployed to:", questManager.address);
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
```

---

## üåê 4. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö MeeBot Quest System

### ‚úÖ QuestManager ‡∏à‡∏∞:
- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å XP ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
- Emit event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå
- ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö frontend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á XP ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

### üßô‚Äç‚ôÇÔ∏è MeeBot Microcopy Suggestion:

> ‚Äúüéâ ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå ‚ÄòDeploy Contracts‚Äô ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö +50 XP ‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å Badge ‚ÄòChain Initiator‚Äô!‚Äù

---

## üì¶ 5. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ `.env` ‡πÅ‡∏•‡∏∞ `hardhat.config.ts`

```env
PRIVATE_KEY=your_wallet_private_key
RPC_URL=https://polygon-rpc.com
```

```ts
import { HardhatUserConfig } from "hardhat/config";
import "@nomicfoundation/hardhat-toolbox";
import * as dotenv from "dotenv";

dotenv.config();

const config: HardhatUserConfig = {
  solidity: "0.8.20",
  networks: {
    polygon: {
      url: process.env.RPC_URL || "",
      accounts: [process.env.PRIVATE_KEY || ""],
    },
  },
};

export default config;
```

---

## ‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏° deploy ‡πÅ‡∏•‡πâ‡∏ß

```bash
npx hardhat run scripts/deploy.ts --network polygon
```

---

‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏∞‡∏ö‡∏ö mint badge ‡∏à‡∏≤‡∏Å frontend, ‡∏™‡∏£‡πâ‡∏≤‡∏á quest tracker UI, ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö microcopy mentor-style ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MeeBot‚Äî‡πÅ‡∏Ñ‡πà‡∏ö‡∏≠‡∏Å‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏∏‡∏Å‡∏î‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á MeeChain üß†‚ö°