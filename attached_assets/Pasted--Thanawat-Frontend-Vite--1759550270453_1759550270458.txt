‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö Thanawat! üéØ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏ù‡∏±‡πà‡∏á Frontend (‡∏ú‡πà‡∏≤‡∏ô Vite) ‡πÅ‡∏•‡∏∞ Backend (‡∏ú‡πà‡∏≤‡∏ô Hardhat/ethers.js) ‡∏Å‡∏±‡∏ö Optimism Sepolia ‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£ scaffold ‡πÅ‡∏ö‡∏ö mentor-style ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ MeeChain ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö smart contracts ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞ fallback-friendly:

---

## üß© Frontend Setup (Vite + Ethers.js)

```ts
// lib/contracts/questManager.ts
import { ethers } from 'ethers'
import QuestManagerABI from '@/artifacts/contracts/QuestManager.sol/QuestManager.json'

const QUEST_MANAGER_ADDRESS = import.meta.env.VITE_QUEST_MANAGER_ADDRESS

export function getQuestManagerContract(providerOrSigner: ethers.Provider | ethers.Signer) {
  return new ethers.Contract(QUEST_MANAGER_ADDRESS, QuestManagerABI.abi, providerOrSigner)
}
```

```ts
// lib/contracts/badgeNFT.ts
import BadgeNFTABI from '@/artifacts/contracts/BadgeNFT.sol/BadgeNFT.json'

const BADGE_NFT_ADDRESS = import.meta.env.VITE_BADGE_NFT_ADDRESS

export function getBadgeNFTContract(providerOrSigner: ethers.Provider | ethers.Signer) {
  return new ethers.Contract(BADGE_NFT_ADDRESS, BadgeNFTABI.abi, providerOrSigner)
}
```

> ‚úÖ Modular ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô mint badge, verify quest, fallback minting

---

## üõ† Backend Setup (Hardhat + RPC)

```ts
// lib/contracts.ts
import { ethers } from 'ethers'
import QuestManagerABI from '../artifacts/contracts/QuestManager.sol/QuestManager.json'
import BadgeNFTABI from '../artifacts/contracts/BadgeNFT.sol/BadgeNFT.json'

const RPC_URL = process.env.RPC_URL!
const provider = new ethers.JsonRpcProvider(RPC_URL)
const signer = new ethers.Wallet(process.env.PRIVATE_KEY!, provider)

export const questManager = new ethers.Contract(
  '0x8EF99743F8e2c4C0f14C3Fc0E2925250D4F7Ad6e',
  QuestManagerABI.abi,
  signer
)

export const badgeNFT = new ethers.Contract(
  '0x1266b73564178415f48C1D9736Dc5bf427503AA2',
  BadgeNFTABI.abi,
  signer
)
```

> ‚úÖ ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô API ‡πÄ‡∏ä‡πà‡∏ô `/api/mintBadge`, `/api/verifyQuest`, ‡∏´‡∏£‡∏∑‡∏≠ fallback flow

---

## üß† Bonus: Chain ID Validation

```ts
const expectedChainId = parseInt(import.meta.env.VITE_CHAIN_ID)
const { chainId } = await provider.getNetwork()

if (chainId !== expectedChainId) {
  throw new Error(`Wrong network! Expected ${expectedChainId}, got ${chainId}`)
}
```

> ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ mint ‡∏ú‡∏¥‡∏î chain ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢ MeeBot ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏£‡πà‡∏ß‡∏°

---

‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏ä‡πà‡∏ß‡∏¢ scaffold fallback mint logic, quest verification, ‡∏´‡∏£‡∏∑‡∏≠ MeeBot reaction overlay ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏° tx status ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏∏‡∏¢‡∏ó‡∏∏‡∏Å flow ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏ß‡πâ üòÑ