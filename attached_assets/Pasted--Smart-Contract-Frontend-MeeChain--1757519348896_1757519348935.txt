ЁЯдЦтЬи  
р╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕б **Smart Contract р╕Бр╕▒р╕Ъ Frontend** р╕Др╕╖р╕нр╕лр╕▒р╕зр╣Гр╕Ир╕Вр╕нр╕З MeeChain р╕Чр╕╡р╣Ир╕Чр╕│р╣Гр╕лр╣Йр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Вр╕Хр╣Йр╕Хр╕нр╕Ър╕Бр╕▒р╕Ър╕гр╕░р╕Ър╕Ъ blockchain р╣Др╕Фр╣Йр╣Бр╕Ър╕Ъ real-time р╕Ьр╣Ир╕▓р╕Щ UI р╕Чр╕╡р╣Ир╕кр╕Щр╕╕р╕Бр╣Бр╕ер╕░р╕бр╕╡ MeeBot р╕Др╕нр╕вр╣Бр╕Щр╕░р╕Щр╕│р╕Хр╕ер╕нр╕Фр╕Чр╕▓р╕З

---

## ЁЯФЧ р╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щр╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕б Smart Contract р╕Бр╕▒р╕Ъ Frontend (MeeChain Style)

### тЬЕ 1. р╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╕Др╕▒р╕Н
- **Contract Address**: р╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣Ир╕Вр╕нр╕З smart contract р╕Чр╕╡р╣И deploy р╣Бр╕ер╣Йр╕з
- **ABI (Application Binary Interface)**: р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Вр╕нр╕Зр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╣Гр╕Щ contract
- **Provider & Signer**: р╣Гр╕Кр╣Йр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Бр╕▒р╕Ъ wallet р╣Ар╕Кр╣Ир╕Щ MetaMask

---

### ЁЯЫая╕П 2. р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╣Вр╕Др╣Йр╕Фр╣Ар╕Кр╕╖р╣Ир╕нр╕б (React + Ethers.js)

```tsx
import { useEffect, useState } from 'react'
import { ethers } from 'ethers'
import MeeBadgeABI from '@/contracts/MeeBadgeNFT.json'

const CONTRACT_ADDRESS = '0xYourContractAddressHere'

const useMeeBadge = () => {
  const [contract, setContract] = useState(null)

  useEffect(() => {
    const init = async () => {
      if (window.ethereum) {
        const provider = new ethers.BrowserProvider(window.ethereum)
        const signer = await provider.getSigner()
        const instance = new ethers.Contract(CONTRACT_ADDRESS, MeeBadgeABI, signer)
        setContract(instance)
      } else {
        console.warn('MetaMask not found')
      }
    }
    init()
  }, [])

  return contract
}
```

> тЬЕ р╣Гр╕Кр╣Й `ethers.Contract` р╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕гр╕╡р╕вр╕Бр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╣Гр╕Щ smart contract  
> тЬЕ MeeBot р╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Юр╕╣р╕Фр╕зр╣Ир╕▓ тАЬр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╕кр╕│р╣Ар╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕зр╕Др╕гр╕▒р╕Ъ! р╕Юр╕гр╣Йр╕нр╕б mint badge р╣Др╕Фр╣Йр╣Ар╕ер╕в!тАЭ

---

### ЁЯОо 3. р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╣Ар╕гр╕╡р╕вр╕Бр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щ mint badge

```tsx
const mintBadge = async () => {
  const contract = useMeeBadge()
  if (!contract) return

  try {
    const tx = await contract.mintBadge(
      userAddress,
      'Zen Pilot',
      'Focus Boost',
      'https://ipfs.io/ipfs/QmBadgeMetadata'
    )
    await tx.wait()
    toast.success('MeeBot: Mint р╕кр╕│р╣Ар╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕зр╕Др╕гр╕▒р╕Ъ! ЁЯОЙ')
  } catch (err) {
    toast.error('MeeBot: р╕бр╕╡р╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕г mint р╕Др╕гр╕▒р╕Ъ ЁЯШв')
  }
}
```

---

## ЁЯза MeeBot Integration

- MeeBot р╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Юр╕╣р╕Фр╣Бр╕Щр╕░р╕Щр╕│р╣Ар╕бр╕╖р╣Ир╕нр╣Ар╕Кр╕╖р╣Ир╕нр╕б wallet р╕кр╕│р╣Ар╕гр╣Зр╕И
- р╣Бр╕кр╕Фр╕З Toast р╕лр╕гр╕╖р╕н Modal р╣Ар╕бр╕╖р╣Ир╕н mint р╕кр╕│р╣Ар╕гр╣Зр╕Ир╕лр╕гр╕╖р╕нр╣Ар╕Бр╕┤р╕Ф error
- р╕Юр╕╣р╕Ф mentor-style р╣Ар╕Кр╣Ир╕Щ:
  > тАЬр╕Др╕╕р╕Ур╕Ыр╕ер╕Фр╕ер╣Зр╕нр╕Б Zen Pilot р╣Бр╕ер╣Йр╕зр╕Др╕гр╕▒р╕Ъ! р╕Юр╕гр╣Йр╕нр╕бр╕ер╕╕р╕вр╕ар╕▓р╕гр╕Бр╕┤р╕Ир╣Гр╕лр╕бр╣Ир╣Др╕Фр╣Йр╣Ар╕ер╕в!тАЭ

---

## ЁЯОп р╣Ар╕кр╕гр╕┤р╕бр╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣Мр╕Чр╕╡р╣Ир╣Бр╕Щр╕░р╕Щр╕│

| р╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣М | р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф |
|---------|-------------|
| ЁЯФД Auto Wallet Connect | р╣Ар╕Кр╕╖р╣Ир╕нр╕б MetaMask р╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤р╣Ар╕бр╕╖р╣Ир╕нр╣Ар╕Вр╣Йр╕▓р╣Бр╕нр╕Ы |
| ЁЯзк Contract Health Check | р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓ contract р╕Хр╕нр╕Ър╕кр╕Щр╕нр╕Зр╣Др╕Фр╣Йр╕лр╕гр╕╖р╕нр╣Др╕бр╣И |
| ЁЯПЕ Badge Viewer | р╣Бр╕кр╕Фр╕З NFT badge р╕Чр╕╡р╣Ир╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Цр╕╖р╕нр╕нр╕вр╕╣р╣И |
| ЁЯЫТ Marketplace Integration | р╕Лр╕╖р╣Йр╕нр╕Вр╕▓р╕в badge р╕Ьр╣Ир╕▓р╕Щ smart contract

---