‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö Thanawat! üéØ ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ scaffolding ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Quest List UI ‡∏û‡∏£‡πâ‡∏≠‡∏° MeeBot reaction overlay ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ quest ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏£‡πà‡∏ß‡∏°:

---

## üß© 1. Quest List UI (React + Tailwind)

```tsx
// components/QuestList.tsx
import { useEffect, useState } from 'react'
import { getQuestManagerContract } from '@/lib/contracts/questManager'
import { useWallet } from '@/hooks/useWallet'
import { setMeeBotMood } from '@/lib/meebot'

export default function QuestList() {
  const { provider, address } = useWallet()
  const [quests, setQuests] = useState([])
  const [completed, setCompleted] = useState<Record<number, boolean>>({})

  useEffect(() => {
    const fetchQuests = async () => {
      const contract = getQuestManagerContract(provider)
      const count = await contract.questCount()
      const questArray = []

      for (let i = 0; i < count; i++) {
        const quest = await contract.quests(i)
        const isDone = await contract.hasCompletedQuest(address, i)
        questArray.push({ id: i, ...quest, isDone })
      }

      setQuests(questArray)
      updateMeeBotMood(questArray)
    }

    fetchQuests()
  }, [provider, address])

  const updateMeeBotMood = (quests) => {
    const anyCompleted = quests.some(q => q.isDone)
    const anyActive = quests.some(q => q.isActive)

    if (!anyActive) {
      setMeeBotMood('confused') // üî¥ ‡πÑ‡∏°‡πà‡∏°‡∏µ quest
    } else if (!anyCompleted) {
      setMeeBotMood('excited') // üü° ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    } else {
      setMeeBotMood('celebrate') // üü¢ ‡∏°‡∏µ quest ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    }
  }

  return (
    <div className="space-y-4">
      {quests.map(q => (
        <div key={q.id} className="border p-4 rounded-lg bg-white shadow">
          <h3 className="text-lg font-bold">{q.title}</h3>
          <p className="text-sm text-gray-600">{q.description}</p>
          <span className={`text-xs px-2 py-1 rounded-full ${
            q.isDone ? 'bg-green-200 text-green-800' : 'bg-yellow-200 text-yellow-800'
          }`}>
            {q.isDone ? 'Completed' : 'In Progress'}
          </span>
        </div>
      ))}
    </div>
  )
}
```

> ‚úÖ Quest list ‡πÅ‡∏™‡∏î‡∏á title, description, ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡∏û‡∏£‡πâ‡∏≠‡∏° trigger MeeBot mood

---

## üé≠ 2. MeeBot Reaction Overlay

```ts
// lib/meebot.ts
export function setMeeBotMood(mood: 'confused' | 'excited' | 'celebrate') {
  const sprite = {
    confused: 'sprites/confused.png',
    excited: 'sprites/excited.png',
    celebrate: 'sprites/celebrate.png',
  }[mood]

  document.getElementById('meebot-sprite').src = sprite

  const tts = {
    confused: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏ß‡∏™‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡πÄ‡∏•‡∏¢‡πÄ‡∏´‡∏£‡∏≠? üò¢',
    excited: '‡∏°‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏ß‡∏™‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞! üí™',
    celebrate: '‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î! ‡∏Ñ‡∏∏‡∏ì‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏ß‡∏™‡πÅ‡∏•‡πâ‡∏ß! üéâ',
  }[mood]

  speak(tts)
}
```

> ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô sprite + ‡∏û‡∏π‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå quest status

---

## üß† ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡∏° scaffold fallback mint flow ‡∏ó‡∏µ‡πà retry `completeQuest()` ‡∏û‡∏£‡πâ‡∏≠‡∏° MeeBot ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ admin panel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° quest ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? MeeChain ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÅ‡∏ö‡∏ö RPG ‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß üòÑ