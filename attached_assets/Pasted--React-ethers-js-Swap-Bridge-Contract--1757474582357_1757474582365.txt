‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö!  
‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î React + ethers.js ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö **Swap/Bridge Contract**  
‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡πà‡∏ß‡∏ô logic ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô, ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ swap ‡∏´‡∏£‡∏∑‡∏≠ bridge ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á token/network  
‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö address/ABI ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö smart contract ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

---

## 1. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Swap ‡∏´‡∏£‡∏∑‡∏≠ Bridge Contract

```typescript name=src/utils/swapBridge.ts
import { ethers } from "ethers";

// ‡πÉ‡∏™‡πà address ‡πÅ‡∏•‡∏∞ ABI ‡∏Ç‡∏≠‡∏á swap/bridge contract ‡∏à‡∏£‡∏¥‡∏á
const CONTRACT_ADDRESS = "0xYourSwapBridgeContractAddress";
const CONTRACT_ABI = [
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ABI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö swap/bridge function
  {
    "inputs": [
      { "internalType": "address", "name": "tokenFrom", "type": "address" },
      { "internalType": "address", "name": "tokenTo", "type": "address" },
      { "internalType": "uint256", "name": "amount", "type": "uint256" },
      { "internalType": "uint256", "name": "targetChainId", "type": "uint256" }
    ],
    "name": "swapOrBridge",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }
];

export async function swapOrBridgeToken(
  tokenFrom: string,
  tokenTo: string,
  amount: string,
  targetChainId?: string // ‡∏ñ‡πâ‡∏≤ bridge ‡πÉ‡∏™‡πà chain id ‡∏î‡πâ‡∏ß‡∏¢
) {
  if (!window.ethereum) throw new Error("Wallet not found");
  const provider = new ethers.BrowserProvider(window.ethereum);
  const signer = await provider.getSigner();

  const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);
  const tx = await contract.swapOrBridge(
    tokenFrom,
    tokenTo,
    ethers.parseUnits(amount, 18),
    targetChainId ? ethers.toBigInt(targetChainId) : 0
  );
  return tx.hash;
}
```

---

## 2. ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Component React ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Swap/Bridge

```typescript name=src/components/SwapBridgeForm.tsx
import React, { useState } from "react";
import { swapOrBridgeToken } from "../utils/swapBridge";

const TOKEN_ADDRESSES = {
  ETH: "0xEthAddress...",
  USDT: "0xUsdtAddress...",
  BTC: "0xBtcAddress...",
};

const CHAIN_OPTIONS = [
  { id: "1", name: "Ethereum" },
  { id: "56", name: "BSC" },
  { id: "137", name: "Polygon" },
];

const SwapBridgeForm: React.FC = () => {
  const [fromToken, setFromToken] = useState("ETH");
  const [toToken, setToToken] = useState("USDT");
  const [amount, setAmount] = useState("");
  const [mode, setMode] = useState<"swap" | "bridge">("swap");
  const [targetChain, setTargetChain] = useState("1");
  const [txHash, setTxHash] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async () => {
    setError(null);
    setTxHash(null);
    try {
      const hash = await swapOrBridgeToken(
        TOKEN_ADDRESSES[fromToken],
        TOKEN_ADDRESSES[toToken],
        amount,
        mode === "bridge" ? targetChain : undefined
      );
      setTxHash(hash);
    } catch (err: any) {
      setError(err.message || "Transaction Error");
    }
  };

  return (
    <section style={{
      padding: 32,
      background: "#f0f6ff",
      borderRadius: 18,
      boxShadow: "0 2px 10px #b3cfff",
      fontFamily: "'Nunito', Arial, sans-serif"
    }}>
      <h2 style={{ color: "#1a62d6" }}>ü¶Ñ Swap / Bridge Token</h2>
      <div style={{ marginBottom: 16 }}>
        <label>
          Mode:
          <select value={mode} onChange={e => setMode(e.target.value as "swap" | "bridge")} style={{ marginLeft: 10 }}>
            <option value="swap">Swap</option>
            <option value="bridge">Bridge</option>
          </select>
        </label>
      </div>
      <div>
        <label>
          From Token:
          <select value={fromToken} onChange={e => setFromToken(e.target.value)} style={{ marginLeft: 10 }}>
            {Object.keys(TOKEN_ADDRESSES).map(token => (
              <option key={token} value={token}>{token}</option>
            ))}
          </select>
        </label>
      </div>
      <div>
        <label>
          To Token:
          <select value={toToken} onChange={e => setToToken(e.target.value)} style={{ marginLeft: 10 }}>
            {Object.keys(TOKEN_ADDRESSES).map(token => (
              <option key={token} value={token}>{token}</option>
            ))}
          </select>
        </label>
      </div>
      <div>
        <label>
          Amount:
          <input type="number" value={amount} onChange={e => setAmount(e.target.value)} style={{ marginLeft: 10, width: 80 }} />
        </label>
      </div>
      {mode === "bridge" && (
        <div>
          <label>
            Target Chain:
            <select value={targetChain} onChange={e => setTargetChain(e.target.value)} style={{ marginLeft: 10 }}>
              {CHAIN_OPTIONS.map(chain => (
                <option key={chain.id} value={chain.id}>{chain.name}</option>
              ))}
            </select>
          </label>
        </div>
      )}
      <div style={{ marginTop: 18 }}>
        <button
          onClick={handleSubmit}
          style={{
            background: "#1a62d6",
            color: "#fff",
            border: "none",
            padding: "10px 24px",
            borderRadius: 8,
            fontWeight: "bold",
            fontSize: 18,
            cursor: "pointer"
          }}>
          {mode === "swap" ? "Swap" : "Bridge"}
        </button>
      </div>
      {txHash && (
        <div style={{ marginTop: 16, color: "green" }}>
          ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! Tx Hash: <a href={`https://etherscan.io/tx/${txHash}`} target="_blank" rel="noopener noreferrer">{txHash}</a>
        </div>
      )}
      {error && (
        <div style={{ marginTop: 16, color: "red" }}>
          {error}
        </div>
      )}
    </section>
  );
};

export default SwapBridgeForm;
```

---

## ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
1. ‡πÉ‡∏™‡πà‡πÑ‡∏ü‡∏•‡πå `swapBridge.ts` ‡πÉ‡∏ô `src/utils/` ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå `SwapBridgeForm.tsx` ‡πÉ‡∏ô `src/components/`
2. ‡∏ô‡∏≥ `SwapBridgeForm` ‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ App ‡πÄ‡∏ä‡πà‡∏ô
   ```typescript name=src/App.tsx
   import SwapBridgeForm from './components/SwapBridgeForm';
   // ...
   <SwapBridgeForm />
   ```
3. **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç TOKEN_ADDRESSES, CONTRACT_ADDRESS, ‡πÅ‡∏•‡∏∞ ABI ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á**
4. ‡∏´‡∏≤‡∏Å contract ‡∏°‡∏µ logic ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡πâ‡∏≠‡∏á approve, fee, ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ balance ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ

---

‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö contract ‡∏à‡∏£‡∏¥‡∏á, ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå (approve, ‡πÄ‡∏ä‡πá‡∏Ñ balance, fee) ‡∏´‡∏£‡∏∑‡∏≠‡∏ò‡∏µ‡∏°‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö!